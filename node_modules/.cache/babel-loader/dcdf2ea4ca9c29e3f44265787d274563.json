{"ast":null,"code":"import e from \"axios\";\nimport t from \"js-cookie\";\nconst r = {\n  user: {},\n  tokens: {},\n  mode: \"live\"\n};\n\nfunction n(e) {\n  try {\n    const t = e.split(\".\")[1].replace(\"-\", \"+\").replace(\"_\", \"/\");\n    return JSON.parse(atob(t));\n  } catch (e) {\n    console.error(\"Problem decoding JWT payload\", e);\n  }\n}\n\nfunction o(e) {\n  var t, r;\n\n  if (e) {\n    if (\"string\" == typeof e) throw new Error(e);\n    if (null != e && null != (t = e.response) && null != (r = t.data) && r.message) throw new Error(e.response.data.message);\n    throw e;\n  }\n}\n\nconst i = r.user;\n\nfunction s(e) {\n  return e.replace(/([^:]\\/)\\/+/g, \"$1\");\n}\n\nconst a = function (t, n, o) {\n  try {\n    const i = s(`${r.baseUrl}${t}`);\n    return Promise.resolve(e.put(i, n, o));\n  } catch (e) {\n    return Promise.reject(e);\n  }\n},\n      c = function (t, n, o) {\n  try {\n    const i = s(`${r.baseUrl}${t}`);\n    return Promise.resolve(e.post(i, n, o));\n  } catch (e) {\n    return Promise.reject(e);\n  }\n},\n      u = function (t, n) {\n  try {\n    const o = s(`${r.baseUrl}${t}`);\n    return Promise.resolve(e.get(o, n));\n  } catch (e) {\n    return Promise.reject(e);\n  }\n};\n\nfunction d(e, n, o) {\n  const i = `${o}.${r.tenantId}`;\n  n = n || {\n    secure: \"live\" === r.mode,\n    sameSite: \"Lax\"\n  }, \"refresh\" === o && (n.sameSite = \"Strict\"), t.set(i, e, n);\n}\n\nfunction h(e) {\n  let r, n;\n\n  try {\n    const e = window.location.pathname,\n          t = window.location.hostname,\n          o = t.split(\".\").slice(-2).join(\".\");\n    r = [void 0, e, \"/\"], n = [void 0, t, \".\" + t, o, \".\" + o];\n  } catch (e) {\n    r = [void 0, \"/\"], n = [void 0];\n  }\n\n  r.map(r => {\n    n.map(n => {\n      const o = {};\n      n && (o.domain = n), r && (o.path = r), t.remove(e, o);\n    });\n  });\n}\n\nfunction l() {\n  h(r.tokens.accessTokenName), h(r.tokens.idTokenName), h(r.tokens.refreshTokenName), r.tokens.accessToken = void 0, r.tokens.idToken = void 0, r.tokens.refreshToken = void 0, function () {\n    for (const e in r.user) \"function\" != typeof r.user[e] && delete r.user[e];\n  }();\n}\n\nfunction m(e) {\n  d(e.access.value, e.access.cookieOptions, \"access\"), d(e.id.value, e.id.cookieOptions, \"id\"), e.refresh && e.refresh.value && d(e.refresh.value, e.refresh.cookieOptions, \"refresh\"), v();\n}\n\nfunction f(e, t) {\n  try {\n    var r = e();\n  } catch (e) {\n    return t(e);\n  }\n\n  return r && r.then ? r.then(void 0, t) : r;\n}\n\nconst p = function (_ref) {\n  let {} = _ref;\n  return Promise.resolve();\n},\n      w = function () {\n  try {\n    const e = f(function () {\n      return Promise.resolve(function () {\n        try {\n          const e = t.get(r.tokens.refreshTokenName);\n          return Promise.resolve(f(function () {\n            return Promise.resolve(u(\"/auth/refresh\", {\n              headers: {\n                authorization: \"Bearer \" + e\n              }\n            })).then(function (_ref2) {\n              let {\n                data: e,\n                status: t\n              } = _ref2;\n              if (200 !== t) throw new Error(e.message || \"Problem with request\");\n              if (e.tokens) return m(e.tokens), e;\n              throw new Error(\"Problem setting cookies\");\n            });\n          }, function (e) {\n            o(e);\n          }));\n        } catch (e) {\n          return Promise.reject(e);\n        }\n      }()).then(function () {});\n    }, function (e) {\n      console.warn(\"Refresh failed: \" + e.message);\n    });\n    return Promise.resolve(e && e.then ? e.then(function () {}) : void 0);\n  } catch (e) {\n    return Promise.reject(e);\n  }\n};\n\nfunction v() {\n  [\"access\", \"id\", \"refresh\"].map(e => {\n    try {\n      const o = t.get(r.tokens[e + \"TokenName\"]);\n      r.tokens[e + \"Token\"] = o, \"id\" === e && o && function () {\n        if (!r.tokens.idToken) return console.warn(\"Cannot define user: missing ID token\");\n        r.user = r.user || {};\n        const e = n(r.tokens.idToken),\n              t = [\"email\", \"phoneNumber\", \"username\", \"name\", \"image\", \"data\", \"confirmedAt\", \"createdAt\", \"updatedAt\", \"mode\", \"userId\", \"userUuid\", \"tenantId\", \"isConfirmed\"];\n\n        for (const n of t) {\n          if (\"update\" === n) return;\n          r.user[n] = e[n];\n        }\n      }();\n    } catch (t) {\n      console.warn(`Problem setting ${e} token.`);\n    }\n  });\n}\n\nr.tokens = r.tokens || {}, r.tokens.refresh = w;\nconst k = r.tokens;\n\nfunction P(e) {\n  if (\"object\" == typeof window && \"object\" == typeof window.location && window.location.href && !(window.location.href.indexOf(e + \"=\") < 0)) return decodeURIComponent(window.location.href.split(e + \"=\")[1].split(\"&\")[0]);\n}\n\nconst y = _ref3 => {\n  let {\n    redirect: e,\n    data: t\n  } = _ref3;\n  !1 !== e && g(e || P(\"redirect\") || t.redirectTo || \"/\");\n};\n\nfunction g(e) {\n  if (!e || \"object\" != typeof document || \"object\" != typeof window) return;\n\n  try {\n    document && window;\n  } catch (e) {\n    return;\n  }\n\n  const t = document.createElement(\"a\");\n  t.href = e, t.pathname !== window.location.pathname && window.location.assign(`${t.pathname}${t.hash}${t.search}`);\n}\n\nfunction b(e, t) {\n  try {\n    var r = e();\n  } catch (e) {\n    return t(e);\n  }\n\n  return r && r.then ? r.then(void 0, t) : r;\n}\n\nconst I = function (_ref4) {\n  let {\n    password: e,\n    existingPassword: t\n  } = _ref4;\n\n  try {\n    return Promise.resolve(b(function () {\n      if (!r.tokens.accessToken) throw new Error('updatePassword({ method: \"jwt\" }) was called without a JWT access token.');\n      return Promise.resolve(a(\"/auth/basic\", {\n        tenantId: r.tenantId,\n        password: e,\n        existingPassword: t\n      }, {\n        headers: {\n          Authorization: \"Bearer \" + r.tokens.accessToken\n        }\n      })).then(function (_ref5) {\n        let {\n          data: e\n        } = _ref5;\n        return e;\n      });\n    }, function (e) {\n      o(e);\n    }));\n  } catch (e) {\n    return Promise.reject(e);\n  }\n},\n      T = function (_ref6) {\n  let {\n    uuid: e,\n    token: t,\n    password: n,\n    redirect: i\n  } = _ref6;\n\n  try {\n    return Promise.resolve(b(function () {\n      if (t = t || P(\"token\"), e = e || P(\"uuid\"), !t || !e) throw new Error(\"Missing token or uuid\");\n      return Promise.resolve(a(\"/auth/reset\", {\n        tenantId: r.tenantId,\n        uuid: e,\n        token: t,\n        password: n\n      })).then(function (_ref7) {\n        let {\n          data: e\n        } = _ref7;\n        if (e.tokens) return m(e.tokens), y({\n          redirect: i,\n          data: e\n        }), e;\n        throw new Error(\"There was a problem resetting your password. Please try again.\");\n      });\n    }, function (e) {\n      o(e);\n    }));\n  } catch (e) {\n    return Promise.reject(e);\n  }\n},\n      E = function (_ref8) {\n  let {\n    method: e,\n    password: t,\n    existingPassword: n,\n    uuid: o,\n    token: i,\n    redirect: s\n  } = _ref8;\n\n  try {\n    switch (e) {\n      case \"link\":\n        return T({\n          uuid: o,\n          token: i,\n          password: t,\n          redirect: s\n        });\n\n      case \"jwt\":\n        return I({\n          password: t,\n          existingPassword: n\n        });\n\n      default:\n        if (i = i || P(\"token\"), (o = o || P(\"uuid\")) && i) return T({\n          uuid: o,\n          token: i,\n          password: t,\n          redirect: s\n        });\n        if (r.tokens.accessToken) return I({\n          password: t,\n          existingPassword: n\n        });\n        throw new Error(\"updatePassword() was called without link credentials (token & uuid) or a JWT access token.\");\n    }\n  } catch (e) {\n    return Promise.reject(e);\n  }\n},\n      j = E;\n\nfunction U(_ref9) {\n  let {\n    provider: e,\n    redirect: t\n  } = _ref9;\n  if (!e) throw new Error(\"Missing provider\");\n\n  const n = function (_ref10) {\n    let {\n      provider: e,\n      redirect: t\n    } = _ref10;\n    if (!e) throw new Error(\"Missing provider\");\n    if (!r.tenantId) throw new Error(\"Missing tenantId\");\n    let n = `${r.baseUrl}auth/${e}/login?tenant_id=${r.tenantId}&origin=${window.location.origin}`,\n        o = t || P(\"redirect\");\n    return !1 === t && (o = \"object\" == typeof document && document.location.pathname), o && (n += \"&redirect=\" + encodeURIComponent(o)), n;\n  }({\n    provider: e,\n    redirect: t\n  });\n\n  window.location.assign(n);\n}\n\nfunction C(e, t) {\n  try {\n    var r = e();\n  } catch (e) {\n    return t(e);\n  }\n\n  return r && r.then ? r.then(void 0, t) : r;\n}\n\nconst N = function (_ref11) {\n  let {\n    email: e,\n    name: t,\n    username: n,\n    userData: i,\n    options: s\n  } = _ref11;\n\n  try {\n    return Promise.resolve(C(function () {\n      return Promise.resolve(c(\"/auth/link\", {\n        email: e,\n        name: t,\n        username: n,\n        data: i,\n        options: s,\n        tenantId: r.tenantId\n      })).then(function (_ref12) {\n        let {\n          data: e\n        } = _ref12;\n        return e;\n      });\n    }, function (e) {\n      o(e);\n    }));\n  } catch (e) {\n    return Promise.reject(e);\n  }\n};\n\nfunction $(e, t) {\n  try {\n    var r = e();\n  } catch (e) {\n    return t(e);\n  }\n\n  return r && r.then ? r.then(void 0, t) : r;\n}\n\nfunction O(_ref13) {\n  let {\n    channel: e,\n    phoneNumber: t,\n    email: r\n  } = _ref13;\n  if (\"sms\" !== e && \"email\" !== e) throw new Error(\"Invalid channel\");\n  if (\"sms\" === e && !t) throw new Error('SMS verification code requires \"phoneNumber\"');\n  if (\"email\" === e && !r) throw new Error('Email verification code requires \"email\"');\n}\n\nconst S = function (_ref14) {\n  let {\n    channel: e = \"sms\",\n    phoneNumber: t,\n    email: n,\n    name: i,\n    username: s,\n    data: a\n  } = _ref14;\n\n  try {\n    return Promise.resolve($(function () {\n      return O({\n        channel: e,\n        phoneNumber: t,\n        email: n\n      }), Promise.resolve(c(\"/auth/code\", {\n        channel: e,\n        email: n,\n        phoneNumber: t,\n        name: i,\n        username: s,\n        data: a,\n        tenantId: r.tenantId\n      })).then(function (_ref15) {\n        let {\n          data: e\n        } = _ref15;\n        return e;\n      });\n    }, function (e) {\n      o(e);\n    }));\n  } catch (e) {\n    return Promise.reject(e);\n  }\n};\n\nfunction z(e, t) {\n  try {\n    var r = e();\n  } catch (e) {\n    return t(e);\n  }\n\n  return r && r.then ? r.then(void 0, t) : r;\n}\n\nfunction x(e, t) {\n  try {\n    var r = e();\n  } catch (e) {\n    return t(e);\n  }\n\n  return r && r.then ? r.then(void 0, t) : r;\n}\n\nconst M = /((^127\\.)|(^10\\.)|(^172\\.1[6-9]\\.)|(^172\\.2[0-9]\\.)|(^172\\.3[0-1]\\.)|(^192\\.168\\.))\\d{1,3}\\.\\d{1,3}/g,\n      F = function () {\n  try {\n    const e = function (e, t) {\n      try {\n        var n = Promise.resolve(u(`/tenants/${r.tenantId}/mode`)).then(function (_ref16) {\n          let {\n            data: e\n          } = _ref16;\n          B.value = e.mode || \"test\", B.reason = R(B.value), r.mode = B.value;\n        });\n      } catch (e) {\n        return t();\n      }\n\n      return n && n.then ? n.then(void 0, t) : n;\n    }(0, function () {\n      B.value = \"test\", r.mode = B.value;\n    });\n\n    return Promise.resolve(e && e.then ? e.then(function () {}) : void 0);\n  } catch (e) {\n    return Promise.reject(e);\n  }\n},\n      B = {\n  value: \"live\",\n  reason: void 0,\n  setMode: F\n};\n\nfunction L() {\n  const e = function (e) {\n    try {\n      const e = window.location.hostname;\n      return !(!e.match(/localhost/g) && !e.match(M));\n    } catch (e) {\n      return !0;\n    }\n  }() || !function () {\n    try {\n      return \"https:\" === window.location.protocol;\n    } catch (e) {\n      return !1;\n    }\n  }() ? \"test\" : \"live\";\n  B.value = e, B.reason = R(e), r.mode = e;\n}\n\nfunction R(e) {\n  try {\n    return \"live\" === e ? \"domain\" : \"http:\" === window.location.protocol ? \"http\" : \"https:\" !== window.location.protocol ? \"protocol\" : \"domain\";\n  } catch (e) {}\n}\n\nL(), r.user.update = function (e) {\n  try {\n    return !e || Object.keys(e).length < 1 ? Promise.resolve(console.warn(\"Missing user properties to update\")) : Promise.resolve(a(\"/self\", e, {\n      headers: {\n        authorization: \"Bearer \" + r.tokens.accessToken\n      }\n    })).then(function () {\n      return Promise.resolve(w()).then(function () {\n        return r.user;\n      });\n    });\n  } catch (e) {\n    return Promise.reject(e);\n  }\n}, r.user.hasRole = function (e) {\n  let {\n    tenantId: t\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  try {\n    if (!r.tokens.accessToken || !r.tenantId) return !1;\n    const {\n      authorization: o\n    } = n(r.tokens.accessToken);\n    return !!o && !(!o[t = t || r.tenantId] || !o[t].roles) && o[t].roles.indexOf(e) > -1;\n  } catch (e) {\n    return !1;\n  }\n}, r.user.updatePassword = E, r.user.getTotp = function () {\n  try {\n    return Promise.resolve(z(function () {\n      if (!r.tokens.accessToken) throw new Error(\"getTotp() was called without a JWT access token.\");\n      return Promise.resolve(u(\"/auth/totp\", {\n        headers: {\n          Authorization: \"Bearer \" + r.tokens.accessToken\n        }\n      })).then(function (_ref17) {\n        let {\n          data: e\n        } = _ref17;\n        return e;\n      });\n    }, function (e) {\n      o(e);\n    }));\n  } catch (e) {\n    return Promise.reject(e);\n  }\n};\nlet A = [],\n    q = !1;\nvar D = {\n  addInitCallback: function (e) {\n    e && \"function\" == typeof e && A.push(e);\n  },\n  init: function (t) {\n    let n = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (!t) return console.warn(\"Userfront initialized without tenantId\");\n\n    if (r.tenantId = t, r.baseUrl = n.baseUrl || \"https://api.userfront.com/v0/\", r.baseUrl.endsWith(\"/\") || (r.baseUrl += \"/\"), n.domain) {\n      r.domain = n.domain;\n      const t = \"https://\" + r.domain;\n      e.defaults.headers.common[\"x-application-id\"] = t, e.defaults.headers.common[\"x-origin\"] = t;\n    }\n\n    r.tokens = r.tokens || {}, r.tokens.accessTokenName = \"access.\" + r.tenantId, r.tokens.idTokenName = \"id.\" + r.tenantId, r.tokens.refreshTokenName = \"refresh.\" + r.tenantId, v(), L();\n\n    try {\n      A.length > 0 && A.forEach(e => {\n        e && \"function\" == typeof e && e({\n          tenantId: t\n        });\n      }), A = [];\n    } catch (e) {}\n  },\n  registerUrlChangedEventListener: function () {\n    if (!q) {\n      q = !0;\n\n      try {\n        history.pushState = (e = history.pushState, function () {\n          var t = e.apply(this, arguments);\n          return window.dispatchEvent(new Event(\"pushstate\")), window.dispatchEvent(new Event(\"urlchanged\")), t;\n        }), history.replaceState = (e => function () {\n          var t = e.apply(this, arguments);\n          return window.dispatchEvent(new Event(\"replacestate\")), window.dispatchEvent(new Event(\"urlchanged\")), t;\n        })(history.replaceState), window.addEventListener(\"popstate\", () => {\n          window.dispatchEvent(new Event(\"urlchanged\"));\n        });\n      } catch (e) {}\n\n      var e;\n    }\n  },\n  logout: function () {\n    let {\n      method: e,\n      redirect: t\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    try {\n      if (\"saml\" === e) return function () {\n        try {\n          if (!r.tokens.accessToken) throw new Error(\"Please log in to authorize your logout request.\");\n          const e = x(function () {\n            return Promise.resolve(u(\"/auth/saml/idp/token\", {\n              headers: {\n                authorization: \"Bearer \" + r.tokens.accessToken\n              }\n            })).then(function (_ref18) {\n              let {\n                data: e\n              } = _ref18;\n              window.location.assign(`${r.baseUrl}auth/saml/idp/logout?tenant_id=${r.tenantId}&token=${e.token}&uuid=${r.user.userUuid}`);\n            });\n          }, function (e) {\n            o(e);\n          });\n          return Promise.resolve(e && e.then ? e.then(function () {}) : void 0);\n        } catch (e) {\n          return Promise.reject(e);\n        }\n      }();\n      if (!r.tokens.accessToken) return Promise.resolve(l());\n      const n = x(function () {\n        return Promise.resolve(u(\"/auth/logout\", {\n          headers: {\n            authorization: \"Bearer \" + r.tokens.accessToken\n          }\n        })).then(function (_ref19) {\n          let {\n            data: e\n          } = _ref19;\n          l(), y({\n            redirect: t,\n            data: e\n          });\n        });\n      }, function () {\n        l();\n      });\n      return Promise.resolve(n && n.then ? n.then(function () {}) : void 0);\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  },\n  mode: B,\n  setMode: F,\n  refresh: (e, t, r) => {\n    try {\n      console.warn(\"Userfront.refresh() is deprecated and will be removed. Please use Userfront.tokens.refresh() instead.\");\n    } catch (e) {}\n\n    return w();\n  },\n  login: function () {\n    let {\n      method: e,\n      userId: t,\n      userUuid: n,\n      email: i,\n      username: s,\n      emailOrUsername: d,\n      phoneNumber: h,\n      password: l,\n      token: f,\n      uuid: w,\n      totpCode: v,\n      backupCode: k,\n      channel: g,\n      verificationCode: I,\n      redirect: T\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    try {\n      if (!e) throw new Error('Userfront.login called without \"method\" property.');\n\n      switch (e) {\n        case \"apple\":\n        case \"azure\":\n        case \"facebook\":\n        case \"github\":\n        case \"google\":\n        case \"linkedin\":\n          return Promise.resolve(U({\n            provider: e,\n            redirect: T\n          }));\n\n        case \"password\":\n          return Promise.resolve(function (_ref20) {\n            let {\n              email: e,\n              username: t,\n              emailOrUsername: n,\n              password: i,\n              redirect: s\n            } = _ref20;\n\n            try {\n              return Promise.resolve(b(function () {\n                return Promise.resolve(c(\"/auth/basic\", {\n                  tenantId: r.tenantId,\n                  emailOrUsername: e || t || n,\n                  password: i\n                })).then(function (_ref21) {\n                  let {\n                    data: e\n                  } = _ref21;\n                  let t;\n\n                  function r(r) {\n                    if (t) return r;\n                    if (e.hasOwnProperty(\"firstFactorCode\")) return e;\n                    throw new Error(\"Please try again.\");\n                  }\n\n                  const n = function () {\n                    if (e.hasOwnProperty(\"tokens\")) return m(e.tokens), Promise.resolve(p(e)).then(function () {\n                      return y({\n                        redirect: s,\n                        data: e\n                      }), t = 1, e;\n                    });\n                  }();\n\n                  return n && n.then ? n.then(r) : r(n);\n                });\n              }, function (e) {\n                o(e);\n              }));\n            } catch (e) {\n              return Promise.reject(e);\n            }\n          }({\n            email: i,\n            username: s,\n            emailOrUsername: d,\n            password: l,\n            redirect: T\n          }));\n\n        case \"passwordless\":\n          return Promise.resolve(N({\n            email: i\n          }));\n\n        case \"link\":\n          return Promise.resolve(function () {\n            let {\n              token: e,\n              uuid: t,\n              redirect: n\n            } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n            try {\n              return Promise.resolve(C(function () {\n                if (e = e || P(\"token\"), t = t || P(\"uuid\"), e && t) return Promise.resolve(a(\"/auth/link\", {\n                  token: e,\n                  uuid: t,\n                  tenantId: r.tenantId\n                })).then(function (_ref22) {\n                  let {\n                    data: e\n                  } = _ref22;\n                  let t;\n\n                  function r(r) {\n                    if (t) return r;\n                    if (e.hasOwnProperty(\"firstFactorCode\")) return e;\n                    throw new Error(\"Problem logging in.\");\n                  }\n\n                  const o = function () {\n                    if (e.hasOwnProperty(\"tokens\")) return m(e.tokens), Promise.resolve(p(e)).then(function () {\n                      return y({\n                        redirect: n,\n                        data: e\n                      }), t = 1, e;\n                    });\n                  }();\n\n                  return o && o.then ? o.then(r) : r(o);\n                });\n              }, function (e) {\n                o(e);\n              }));\n            } catch (e) {\n              return Promise.reject(e);\n            }\n          }({\n            token: f,\n            uuid: w,\n            redirect: T\n          }));\n\n        case \"totp\":\n          return Promise.resolve(function () {\n            let {\n              totpCode: e,\n              backupCode: t,\n              userId: n,\n              userUuid: i,\n              emailOrUsername: s,\n              email: a,\n              username: u,\n              phoneNumber: d,\n              redirect: h\n            } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n            try {\n              return Promise.resolve(z(function () {\n                if (e || t) return Promise.resolve(c(\"/auth/totp\", {\n                  totpCode: e,\n                  backupCode: t,\n                  userId: n,\n                  userUuid: i,\n                  emailOrUsername: s,\n                  email: a,\n                  username: u,\n                  phoneNumber: d,\n                  tenantId: r.tenantId\n                })).then(function (_ref23) {\n                  let {\n                    data: e\n                  } = _ref23;\n                  let t;\n\n                  function r(r) {\n                    if (t) return r;\n                    if (e.hasOwnProperty(\"firstFactorCode\")) return e;\n                    throw new Error(\"Problem logging in.\");\n                  }\n\n                  const n = function () {\n                    if (e.hasOwnProperty(\"tokens\")) return m(e.tokens), Promise.resolve(p(e)).then(function () {\n                      return y({\n                        redirect: h,\n                        data: e\n                      }), t = 1, e;\n                    });\n                  }();\n\n                  return n && n.then ? n.then(r) : r(n);\n                });\n              }, function (e) {\n                o(e);\n              }));\n            } catch (e) {\n              return Promise.reject(e);\n            }\n          }({\n            totpCode: v,\n            backupCode: k,\n            userId: t,\n            userUuid: n,\n            emailOrUsername: d,\n            email: i,\n            username: s,\n            phoneNumber: h,\n            redirect: T\n          }));\n\n        case \"verificationCode\":\n          return Promise.resolve(function () {\n            let {\n              channel: e,\n              verificationCode: t,\n              email: n,\n              phoneNumber: i,\n              redirect: s\n            } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n            try {\n              return Promise.resolve($(function () {\n                return O({\n                  channel: e,\n                  phoneNumber: i,\n                  email: n\n                }), Promise.resolve(a(\"/auth/code\", {\n                  channel: e,\n                  verificationCode: t,\n                  email: n,\n                  phoneNumber: i,\n                  tenantId: r.tenantId\n                })).then(function (_ref24) {\n                  let {\n                    data: e\n                  } = _ref24;\n                  let t;\n\n                  function r(r) {\n                    if (t) return r;\n                    if (e.hasOwnProperty(\"firstFactorCode\")) return e;\n                    throw new Error(\"Problem logging in.\");\n                  }\n\n                  const n = function () {\n                    if (e.hasOwnProperty(\"tokens\")) return m(e.tokens), Promise.resolve(p(e)).then(function () {\n                      return y({\n                        redirect: s,\n                        data: e\n                      }), t = 1, e;\n                    });\n                  }();\n\n                  return n && n.then ? n.then(r) : r(n);\n                });\n              }, function (e) {\n                o(e);\n              }));\n            } catch (e) {\n              return Promise.reject(e);\n            }\n          }({\n            channel: g,\n            email: i,\n            phoneNumber: h,\n            verificationCode: I,\n            redirect: T\n          }));\n\n        case \"saml\":\n          return Promise.resolve(function () {\n            try {\n              return Promise.resolve(function (e, t) {\n                try {\n                  var n = r.tokens.accessToken ? Promise.resolve(u(\"/auth/saml/idp/token\", {\n                    headers: {\n                      authorization: \"Bearer \" + r.tokens.accessToken\n                    }\n                  })).then(function (_ref25) {\n                    let {\n                      data: e\n                    } = _ref25;\n                    window.location.assign(`${r.baseUrl}auth/saml/idp/login?tenant_id=${r.tenantId}&token=${e.token}&uuid=${r.user.userUuid}`);\n                  }) : console.warn(\"Cannot complete SAML login without access token\");\n                } catch (e) {\n                  return t(e);\n                }\n\n                return n && n.then ? n.then(void 0, t) : n;\n              }(0, function (e) {\n                o(e);\n              }));\n            } catch (e) {\n              return Promise.reject(e);\n            }\n          }());\n\n        default:\n          throw new Error('Userfront.login called with invalid \"method\" property.');\n      }\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  },\n  resetPassword: j,\n  updatePassword: E,\n  sendLoginLink: function (e) {\n    try {\n      return Promise.resolve(C(function () {\n        return Promise.resolve(c(\"/auth/link\", {\n          email: e,\n          tenantId: r.tenantId\n        })).then(function (_ref26) {\n          let {\n            data: e\n          } = _ref26;\n          return e;\n        });\n      }, function (e) {\n        o(e);\n      }));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  },\n  sendResetLink: function (e) {\n    try {\n      return Promise.resolve(b(function () {\n        return Promise.resolve(c(\"/auth/reset/link\", {\n          email: e,\n          tenantId: r.tenantId\n        })).then(function (_ref27) {\n          let {\n            data: e\n          } = _ref27;\n          return e;\n        });\n      }, function (e) {\n        o(e);\n      }));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  },\n  sendVerificationCode: S,\n  signup: function () {\n    let {\n      method: e,\n      email: t,\n      username: n,\n      phoneNumber: i,\n      name: s,\n      data: a,\n      password: u,\n      channel: d,\n      redirect: h\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    try {\n      if (!e) throw new Error('Userfront.signup called without \"method\" property.');\n\n      switch (e) {\n        case \"apple\":\n        case \"azure\":\n        case \"facebook\":\n        case \"github\":\n        case \"google\":\n        case \"linkedin\":\n          return Promise.resolve(U({\n            provider: e,\n            redirect: h\n          }));\n\n        case \"password\":\n          return Promise.resolve(function () {\n            let {\n              username: e,\n              name: t,\n              email: n,\n              password: i,\n              userData: s,\n              redirect: a\n            } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n            try {\n              return Promise.resolve(b(function () {\n                return Promise.resolve(c(\"/auth/create\", {\n                  tenantId: r.tenantId,\n                  username: e,\n                  name: t,\n                  email: n,\n                  password: i,\n                  data: s\n                })).then(function (_ref28) {\n                  let {\n                    data: e\n                  } = _ref28;\n                  if (e.tokens) return m(e.tokens), Promise.resolve(p(e)).then(function () {\n                    return y({\n                      redirect: a,\n                      data: e\n                    }), e;\n                  });\n                  throw new Error(\"Please try again.\");\n                });\n              }, function (e) {\n                o(e);\n              }));\n            } catch (e) {\n              return Promise.reject(e);\n            }\n          }({\n            username: n,\n            name: s,\n            email: t,\n            password: u,\n            userData: a,\n            redirect: h\n          }));\n\n        case \"passwordless\":\n          return Promise.resolve(N({\n            email: t,\n            name: s,\n            username: n,\n            userData: a\n          }));\n\n        case \"verificationCode\":\n          return Promise.resolve(S({\n            channel: d,\n            email: t,\n            phoneNumber: i,\n            name: s,\n            username: n,\n            data: a\n          }));\n\n        default:\n          throw new Error('Userfront.signup called with invalid \"method\" property.');\n      }\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  },\n  store: r,\n  tokens: k,\n  accessToken: function () {\n    return r.tokens.accessToken = t.get(r.tokens.accessTokenName), r.tokens.accessToken;\n  },\n  idToken: function () {\n    return r.tokens.idToken = t.get(r.tokens.idTokenName), r.tokens.idToken;\n  },\n  redirectIfLoggedIn: function () {\n    let {\n      redirect: e\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    try {\n      if (!r.tokens.accessToken) return Promise.resolve(l());\n      if (e) return Promise.resolve(g(e));\n      if (P(\"redirect\")) return Promise.resolve(g(P(\"redirect\")));\n\n      const t = function (e, t) {\n        try {\n          var n = Promise.resolve(u(\"/self\", {\n            headers: {\n              authorization: \"Bearer \" + r.tokens.accessToken\n            }\n          })).then(function (_ref29) {\n            let {\n              data: e\n            } = _ref29;\n            e.tenant && e.tenant.loginRedirectPath && g(e.tenant.loginRedirectPath);\n          });\n        } catch (e) {\n          return t();\n        }\n\n        return n && n.then ? n.then(void 0, t) : n;\n      }(0, function () {\n        l();\n      });\n\n      return Promise.resolve(t && t.then ? t.then(function () {}) : void 0);\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  },\n  user: i,\n  sendSms: function () {\n    let {\n      type: e,\n      phoneNumber: t,\n      firstFactorCode: n\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    try {\n      if (!e) throw new Error('Userfront.sendSms called without \"type\" property.');\n\n      switch (e) {\n        case \"verificationCode\":\n          if (!t || !n) throw new Error('Userfront.sendSms type \"verificationCode\" requires \"phoneNumber\" and \"firstFactorCode\".');\n          return function () {\n            let {\n              firstFactorCode: e,\n              strategy: t,\n              channel: n,\n              phoneNumber: i\n            } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n            try {\n              if (!(e && t && n && i)) throw new Error(\"Userfront.sendMfaCode missing parameters.\");\n              return Promise.resolve(function (o, s) {\n                try {\n                  var a = Promise.resolve(c(\"/auth/mfa\", {\n                    tenantId: r.tenantId,\n                    firstFactorCode: e,\n                    strategy: t,\n                    channel: n,\n                    phoneNumber: i\n                  })).then(function (_ref30) {\n                    let {\n                      data: e\n                    } = _ref30;\n                    return e;\n                  });\n                } catch (e) {\n                  return s(e);\n                }\n\n                return a && a.then ? a.then(void 0, s) : a;\n              }(0, function (e) {\n                o(e);\n              }));\n            } catch (e) {\n              return Promise.reject(e);\n            }\n          }({\n            firstFactorCode: n,\n            phoneNumber: t,\n            strategy: \"verificationCode\",\n            channel: \"sms\"\n          });\n\n        default:\n          throw new Error('Userfront.sendSms called with invalid \"type\" property.');\n      }\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n};\nexport default D;","map":{"version":3,"sources":["../src/store.js","../src/utils.js","../src/user.js","../src/api.js","../src/cookies.js","../src/tokens.js","../src/refresh.js","../src/url.js","../src/password.js","../src/sso.js","../src/link.js","../src/verificationCode.js","../src/totp.js","../src/logout.js","../src/constants.js","../src/mode.js","../src/user.methods.js","../src/index.js","../src/login.js","../src/saml.js","../src/signup.js","../src/mfa.js"],"names":["store","user","tokens","mode","getJWTPayload","token","encodedPayload","split","replace","JSON","parse","atob","error","console","throwFormattedError","Error","response","data","message","idToken","warn","idTokenPayload","propsToDefine","prop","attr","reduceSlashes","str","get","path","options","url","baseUrl","axios","post","payload","put","setCookie","value","type","cookieName","tenantId","secure","sameSite","Cookies","set","removeCookie","name","paths","domains","window","location","pathname","hostname","primaryDomain","slice","join","undefined","err","map","domain","remove","removeAllCookies","accessTokenName","idTokenName","refreshTokenName","setCookiesAndTokens","access","cookieOptions","id","refresh","setTokensFromCookies","accessToken","tokenName","setUser","refreshToken","unsetUser","basicRefresh","status","headers","authorization","exchange","body","recover","result","e","then","getQueryAttr","attrName","href","indexOf","decodeURIComponent","handleRedirect","redirect","redirectTo","redirectToPath","tenant","loginRedirectPath","pathOrUrl","document","el","createElement","hash","search","username","email","password","userData","emailOrUsername","hasOwnProperty","updatePassword","method","existingPassword","uuid","updatePasswordWithLink","updatePasswordWithJwt","resetPassword","Authorization","provider","origin","encodeURIComponent","signonWithSso","getProviderLink","assign","sendPasswordlessLink","enforceChannel","channel","phoneNumber","sendVerificationCode","res","verificationCode","totpCode","backupCode","userId","userUuid","completeSamlLogout","_catch","privateIPRegex","reason","setMode","setModeSync","hn","match","protocol","getReason","modeValue","isTestHostname","isHttps","Object","keys","length","roleName","roles","update","hasRole","getTotp","initCallbacks","opts","endsWith","defaults","common","forEach","cb","push","isRegistered","history","pushState","f","ret","apply","this","arguments","dispatchEvent","Event","replaceState","addEventListener","addInitCallback","init","registerUrlChangedEventListener","logout","a","b","c","login","sendLoginLink","sendResetLink","signup","redirectIfLoggedIn","sendSms","loginWithPassword","loginWithLink","loginWithTotp","loginWithVerificationCode","completeSamlLogin","signupWithPassword","firstFactorCode","sendMfaCode","strategy"],"mappings":";;MAAaA,CAAAA,GAAQ;AACnBC,EAAAA,IAAAA,EAAM,EADa;AAEnBC,EAAAA,MAAAA,EAAQ,EAFW;AAGnBC,EAAAA,IAAAA,EAAM;AAHa,C;;AAGb,SCSQC,CDTR,CCSsBC,CDTtB,ECSsBA;AAC5B,MAAA;AACE,UAAMC,CAAAA,GAAiBD,CAAAA,CACpBE,KADoBF,CACd,GADcA,EACT,CADSA,EAEpBG,OAFoBH,CAEZ,GAFYA,EAEP,GAFOA,EAGpBG,OAHoBH,CAGZ,GAHYA,EAGP,GAHOA,CAAvB;AAIA,WAAOI,IAAAA,CAAKC,KAALD,CAAWE,IAAAA,CAAKL,CAALK,CAAXF,CAAP;AACA,GANF,CAME,OAAOG,CAAP,EAAOA;AACPC,IAAAA,OAAAA,CAAQD,KAARC,CAAc,8BAAdA,EAA8CD,CAA9CC;AAA8CD;AAAAA;;AAAAA,SAIlCE,CAJkCF,CAIdA,CAJcA,EAIdA;AAAAA,MAAAA,CAAAA,EAAAA,CAAAA;;AAClC,MAAKA,CAAL,EAAA;AACA,QAAqB,YAAA,OAAVA,CAAX,EAA+B,MAAA,IAAUG,KAAV,CAAgBH,CAAhB,CAAA;AAC/B,QAAA,QAAIA,CAAJ,IAAIA,SAAAA,CAAAA,GAAAA,CAAAA,CAAOI,QAAPJ,CAAJ,IAAWI,SAAAA,CAAAA,GAAPJ,CAAAA,CAAiBK,IAAVD,CAAX,IAAIJ,CAAAA,CAAuBM,OAA3B,EACE,MAAA,IAAUH,KAAV,CAAgBH,CAAAA,CAAMI,QAANJ,CAAeK,IAAfL,CAAoBM,OAApC,CAAA;AAEF,UAAMN,CAAN;AAAMA;ACqBR;;AAAA,MAAaX,CAAAA,GAAOD,CAAAA,CAAMC,IAA1B;;AAA0BA,SC/CjBwB,CD+CiBxB,CC/CHyB,CD+CGzB,EC/CHyB;AACrB,SAAOA,CAAAA,CAAIlB,OAAJkB,CAAY,cAAZA,EAA4B,IAA5BA,CAAP;AAiCF;;AAAA,MAAsBS,CAAAA,GAAAA,UAAIP,CAAJO,EAAUD,CAAVC,EAAmBN,CAAnBM,EAAmBN;AAAAA,MAAAA;AACvC,UAAMC,CAAAA,GAAML,CAAAA,CAAe,GAAEzB,CAAAA,CAAM+B,OAAAA,GAAUH,CAAAA,EAAjCH,CAAZ;AACA,WAAA,OAAA,CAAA,OAAA,CAAOO,CAAAA,CAAMG,GAANH,CAAUF,CAAVE,EAAeE,CAAfF,EAAwBH,CAAxBG,CAAP,CAAA;AAFF,GAAyCH,CAAzC,OAAA,CAAA,EAAA;AAAA,WAAA,OAAA,CAAA,MAAA,CAAA,CAAA,CAAA;AAAA;AAAA,CAAA;AAAA,MAZsBI,CAAAA,GAAAA,UAAKL,CAALK,EAAWC,CAAXD,EAAoBJ,CAApBI,EAAoBJ;AAAAA,MAAAA;AACxC,UAAMC,CAAAA,GAAML,CAAAA,CAAe,GAAEzB,CAAAA,CAAM+B,OAAAA,GAAUH,CAAAA,EAAjCH,CAAZ;AACA,WAAA,OAAA,CAAA,OAAA,CAAOO,CAAAA,CAAMC,IAAND,CAAWF,CAAXE,EAAgBE,CAAhBF,EAAyBH,CAAzBG,CAAP,CAAA;AAFF,GAA0CH,CAA1C,OAAA,CAAA,EAAA;AAAA,WAAA,OAAA,CAAA,MAAA,CAAA,CAAA,CAAA;AAAA;AAAA,CAYA;AAAA,MAxBsBF,CAAAA,GAAAA,UAAIC,CAAJD,EAAUE,CAAVF,EAAUE;AAAAA,MAAAA;AAC9B,UAAMC,CAAAA,GAAML,CAAAA,CAAe,GAAEzB,CAAAA,CAAM+B,OAAAA,GAAUH,CAAAA,EAAjCH,CAAZ;AACA,WAAA,OAAA,CAAA,OAAA,CAAOO,CAAAA,CAAML,GAANK,CAAUF,CAAVE,EAAeH,CAAfG,CAAP,CAAA;AAFF,GAAgCH,CAAhC,OAAA,CAAA,EAAA;AAAA,WAAA,OAAA,CAAA,MAAA,CAAA,CAAA,CAAA;AAAA;AAAA,CAwBA;;AAxBA,SCJgBO,CDIhB,CCJ0BC,CDI1B,ECJiCR,CDIjC,ECJ0CS,CDI1C,ECJ0CA;AACxC,QAAMC,CAAAA,GAAc,GAAED,CAAAA,IAAQtC,CAAAA,CAAMwC,QAAAA,EAApC;AACAX,EAAAA,CAAAA,GAAUA,CAAAA,IAAW;AACnBY,IAAAA,MAAAA,EAAuB,WAAfzC,CAAAA,CAAMG,IADK;AAEnBuC,IAAAA,QAAAA,EAAU;AAFS,GAArBb,EAIa,cAATS,CAAS,KACXT,CAAAA,CAAQa,QAARb,GAAmB,QADR,CAJbA,EAOAc,CAAAA,CAAQC,GAARD,CAAYJ,CAAZI,EAAwBN,CAAxBM,EAA+Bd,CAA/Bc,CAPAd;AAcF;;AAAA,SAASgB,CAAT,CAAsBC,CAAtB,EAAsBA;AAEpB,MAAIC,CAAJ,EAAWC,CAAX;;AACA,MAAA;AACE,UAAMpB,CAAAA,GAAOqB,MAAAA,CAAOC,QAAPD,CAAgBE,QAA7B;AAAA,UACMC,CAAAA,GAAWH,MAAAA,CAAOC,QAAPD,CAAgBG,QADjC;AAAA,UAGMC,CAAAA,GADgBD,CAAAA,CAAS7C,KAAT6C,CAAe,GAAfA,EACcE,KADdF,CACcE,CAAO,CADrBF,EACwBG,IADxBH,CAC6B,GAD7BA,CAFtB;AAIAL,IAAAA,CAAAA,GAAQ,CAAA,KAACS,CAAD,EAAY5B,CAAZ,EAAkB,GAAlB,CAARmB,EACAC,CAAAA,GAAU,CAAA,KACRQ,CADQ,EAERJ,CAFQ,EAGP,MAAGA,CAHI,EAIRC,CAJQ,EAKP,MAAGA,CALI,CADVN;AAQA,GAbF,CAaE,OAAOU,CAAP,EAAOA;AACPV,IAAAA,CAAAA,GAAQ,CAAA,KAACS,CAAD,EAAY,GAAZ,CAART,EACAC,CAAAA,GAAU,CAAA,KAACQ,CAAD,CADVT;AAKFA;;AAAAA,EAAAA,CAAAA,CAAMW,GAANX,CAAWnB,CAAAA,IAAAA;AACToB,IAAAA,CAAAA,CAAQU,GAARV,CAAaW,CAAAA,IAAAA;AACX,YAAM9B,CAAAA,GAAU,EAAhB;AACI8B,MAAAA,CAAAA,KAAQ9B,CAAAA,CAAQ8B,MAAR9B,GAAiB8B,CAAzBA,CAAAA,EACA/B,CAAAA,KAAMC,CAAAA,CAAQD,IAARC,GAAeD,CAArBA,CADA+B,EAEJhB,CAAAA,CAAQiB,MAARjB,CAAeG,CAAfH,EAAqBd,CAArBc,CAFIgB;AAEiB9B,KAJvBmB;AAIuBnB,GALzBkB;AAaF;;AAAA,SAAgBc,CAAhB,GAAgBA;AACdhB,EAAAA,CAAAA,CAAa7C,CAAAA,CAAME,MAANF,CAAa8D,eAA1BjB,CAAAA,EACAA,CAAAA,CAAa7C,CAAAA,CAAME,MAANF,CAAa+D,WAA1BlB,CADAA,EAEAA,CAAAA,CAAa7C,CAAAA,CAAME,MAANF,CAAagE,gBAA1BnB,CAFAA,ECPA7C,CAAAA,CAAME,MAANF,CAAauE,WAAbvE,GAAauE,KAAcf,CDO3BX,ECNA7C,CAAAA,CAAME,MAANF,CAAamB,OAAbnB,GAAamB,KAAUqC,CDMvBX,ECLA7C,CAAAA,CAAME,MAANF,CAAa0E,YAAb1E,GAAa0E,KAAelB,CDK5BX,EFtBF,YAAA;AACE,SAAK,MAAMrB,CAAX,IAAmBxB,CAAAA,CAAMC,IAAzB,EACkC,cAAA,OAArBD,CAAAA,CAAMC,IAAND,CAAWwB,CAAXxB,CAAqB,IAAVwB,OACbxB,CAAAA,CAAMC,IAAND,CAAWwB,CAAXxB,CADuB;AGgBlC2E,GHlBF,EEsBE9B;ACJA8B;;AAAAA,SDccV,CCddU,CDckCzE,CCdlCyE,EDckCzE;AAClCkC,EAAAA,CAAAA,CAAUlC,CAAAA,CAAOgE,MAAPhE,CAAcmC,KAAxBD,EAA+BlC,CAAAA,CAAOgE,MAAPhE,CAAciE,aAA7C/B,EAA4D,QAA5DA,CAAAA,EACAA,CAAAA,CAAUlC,CAAAA,CAAOkE,EAAPlE,CAAUmC,KAApBD,EAA2BlC,CAAAA,CAAOkE,EAAPlE,CAAUiE,aAArC/B,EAAoD,IAApDA,CADAA,EAEIlC,CAAAA,CAAOmE,OAAPnE,IAAkBA,CAAAA,CAAOmE,OAAPnE,CAAemC,KAAjCnC,IACFkC,CAAAA,CAAUlC,CAAAA,CAAOmE,OAAPnE,CAAemC,KAAzBD,EAAgClC,CAAAA,CAAOmE,OAAPnE,CAAeiE,aAA/C/B,EAA8D,SAA9DA,CAHFA,EAKAkC,CAAAA,EALAlC;AEyeK;;AAAA,SAAA,CAAA,CAAgB6C,CAAhB,EAAsBC,CAAtB,EAAsBA;AAC5B,MAAA;AACC,QAAIC,CAAAA,GAASF,CAAAA,EAAb;AACC,GAFF,CAEE,OAAMG,CAAN,EAAMA;AACP,WAAOF,CAAAA,CAAQE,CAARF,CAAP;AAED;;AAAA,SAAIC,CAAAA,IAAUA,CAAAA,CAAOE,IAAjBF,GACIA,CAAAA,CAAOE,IAAPF,CAAOE,KAAK,CAAZF,EAAoBD,CAApBC,CADJA,GAGGA,CAHP;AAjfD;;AAAA,MAAsBH,CAAAA,GAAAA,gBAAAA;AAAAA,MAAAA,EAAAA;AACpB,SAAA,OAAA,CAAA,OAAA,EAAA;AAAA,CADF;AAAA,MAzDsBX,CAAAA,GAAAA,YAAAA;AAAAA,MAAAA;AAAAA,UAAAA,CAAAA,GAAAA,CAAAA,CAAAA,YAAAA;AAAAA,aAAAA,OAAAA,CAAAA,OAAAA,CAAAA,YAAAA;AAAAA,YAAAA;AAepB,gBAAMK,CAAAA,GAAe/B,CAAAA,CAAQhB,GAARgB,CAAY3C,CAAAA,CAAME,MAANF,CAAagE,gBAAzBrB,CAArB;AAD4B,iBAAA,OAAA,CAAA,OAAA,CAAA,CAAA,CAAA,YAAA;AAAA,mBAAA,OAAA,CAAA,OAAA,CAGKhB,CAAAA,CAAK,eAALA,EAAqB;AAClDmD,cAAAA,OAAAA,EAAS;AACPC,gBAAAA,aAAAA,EAAgB,YAASL;AADlB;AADyC,aAArB/C,CAHL,EAKG+C,IALH,CAKGA,iBAFfG;AAAAA,kBAEeH;AAFvBzD,gBAAAA,IAAAA,EAAEA,CAEqByD;AAFvBzD,gBAAAA,MAAAA,EAAQ4D;AAEeH,eAFfG;AAKd,kBAAe,QAAXA,CAAJ,EACE,MAAA,IAAU9D,KAAV,CAAgBE,CAAAA,CAAKC,OAALD,IAAgB,sBAAhC,CAAA;AAPA,kBASEA,CAAAA,CAAKf,MATP,EAWA,OADA+D,CAAAA,CAAoBhD,CAAAA,CAAKf,MAAzB+D,CAAAA,EACOhD,CAAP;AAEA,oBAAA,IAAUF,KAAV,CAAgB,yBAAhB,CAAA;AAAgB,aAfQ,CAAA;AAeR,WAfQ,EAeR,UAEXH,CAFW,EAEXA;AACPE,YAAAA,CAAAA,CAAoBF,CAApBE,CAAAA;AAAoBF,WAlBM,CAAA,CAAA;AAkBNA,SAhCFyD,CAgCEzD,OAAAA,CAAAA,EAAAA;AAAAA,iBAAAA,OAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA;AAAAA;AA9BdgE,OAFYP,EAAAA,EAEZO,IAFYP,CAEZO,YAAAA,CAAAA,CAFYP,CAAAA;AAEZO,KAFYP,EAEZO,UACChE,CADDgE,EACChE;AACPC,MAAAA,OAAAA,CAAQO,IAARP,CAAc,qBAAkBD,CAAAA,CAAMM,OAAtCL;AAAsCK,KAJpBmD,CAAAA;AAIoBnD,WAAAA,OAAAA,CAAAA,OAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,IAAAA,GAAAA,CAAAA,CAAAA,IAAAA,CAAAA,YAAAA,CAAAA,CAAAA,CAAAA,GAAAA,KAAAA,CAAAA,CAAAA;AAJ1C,GAAsBmD,CAAtB,OAAA,CAAA,EAAA;AAAA,WAAA,OAAA,CAAA,MAAA,CAAA,CAAA,CAAA;AAAA;AAAA,CAyDA;;ADrCA,SAAgBC,CAAhB,GAAgBA;AACK,GAAC,QAAD,EAAW,IAAX,EAAiB,SAAjB,EACRZ,GADQ,CACHc,CAAAA,IAAAA;AACd,QAAA;AACE,YAAMnE,CAAAA,GAAQsC,CAAAA,CAAQhB,GAARgB,CAAY3C,CAAAA,CAAME,MAANF,CAAgBwE,CAAAA,GAAF,WAAdxE,CAAZ2C,CAAd;AACA3C,MAAAA,CAAAA,CAAME,MAANF,CAAgBwE,CAAAA,GAAF,OAAdxE,IAAoCK,CAApCL,EAGkB,SAAdwE,CAAc,IAAQnE,CAAR,IAAQA,YAAAA;AHnC9B,YAAA,CAAKL,CAAAA,CAAME,MAANF,CAAamB,OAAlB,EACE,OAAON,OAAAA,CAAQO,IAARP,CAAa,sCAAbA,CAAP;AAGFb,QAAAA,CAAAA,CAAMC,IAAND,GAAaA,CAAAA,CAAMC,IAAND,IAAc,EAA3BA;AACA,cAAMqB,CAAAA,GAAiBjB,CAAAA,CAAcJ,CAAAA,CAAME,MAANF,CAAamB,OAA3Bf,CAAvB;AAAA,cAGMkB,CAAAA,GAAgB,CACpB,OADoB,EAEpB,aAFoB,EAGpB,UAHoB,EAIpB,MAJoB,EAKpB,OALoB,EAMpB,MANoB,EAOpB,aAPoB,EAQpB,WARoB,EASpB,WAToB,EAUpB,MAVoB,EAWpB,QAXoB,EAYpB,UAZoB,EAapB,UAboB,EAcpB,aAdoB,CAHtB;;AAmBA,aAAK,MAAMC,CAAX,IAAmBD,CAAnB,EAAkC;AAChC,cAAa,aAATC,CAAJ,EAAuB;AACvBvB,UAAAA,CAAAA,CAAMC,IAAND,CAAWuB,CAAXvB,IAAmBqB,CAAAA,CAAeE,CAAfF,CAAnBrB;AAAkCuB;AGU9BkD,OADwBpE,EAH1BL;AAMA,KARF,CAQE,OAAOY,CAAP,EAAOA;AACPC,MAAAA,OAAAA,CAAQO,IAARP,CAAc,mBAAkB2D,CAAAA,SAAhC3D;AAAgC2D;AAAAA,GAXjB;AA9BrBxE;;AAAAA,CAAAA,CAAME,MAANF,GAAeA,CAAAA,CAAME,MAANF,IAAgB,EAA/BA,EACAA,CAAAA,CAAME,MAANF,CAAaqE,OAAbrE,GAAuBqE,CADvBrE;AACuBqE,MA0DVnE,CAAAA,GAASF,CAAAA,CAAME,MA1DLmE;;AA0DKnE,SExDZoF,CFwDYpF,CExDCqF,CFwDDrF,EExDCqF;AAC3B,MACoB,YAAA,OAAXtC,MAAW,IACS,YAAA,OAApBA,MAAAA,CAAOC,QADI,IAEjBD,MAAAA,CAAOC,QAAPD,CAAgBuC,IAFC,IAEDA,EACjBvC,MAAAA,CAAOC,QAAPD,CAAgBuC,IAAhBvC,CAAqBwC,OAArBxC,CAAgCsC,CAAAA,GAAF,GAA9BtC,IAA+C,CAD9BuC,CAHnB,EAQA,OAAOE,kBAAAA,CACLzC,MAAAA,CAAOC,QAAPD,CAAgBuC,IAAhBvC,CAAqB1C,KAArB0C,CAA8BsC,CAAAA,GAAF,GAA5BtC,EAA2C,CAA3CA,EAA8C1C,KAA9C0C,CAAoD,GAApDA,EAAyD,CAAzDA,CADKyC,CAAP;AAC2D;;AAAA,MAUhDC,CAAAA,GAAiB,SAAa1E;AAAAA,MAAb;AAAG2E,IAAAA,QAAAA,EAAAA,CAAH;AAAa3E,IAAAA,IAAAA,EAAAA;AAAb,GAAaA;AAAAA,GACxB,CADwBA,KACrC2E,CADqC3E,IAGzC6E,CAAAA,CADaF,CAAAA,IAAYN,CAAAA,CAAa,UAAbA,CAAZM,IAAwC3E,CAAAA,CAAK4E,UAA7CD,IAA2D,GACxEE,CAHyC7E;AAE+B,CAZb;;AAYa,SAuC1D6E,CAvC0D,CAuC3CG,CAvC2C,EAuC3CA;AAE7B,MAAA,CACGA,CADH,IAEsB,YAAA,OAAbC,QAFT,IAGoB,YAAA,OAAXjD,MAHT,EAKE;;AAEF,MAAA;AACEiD,IAAAA,QAAAA,IAAYjD,MAAZiD;AACA,GAFF,CAEE,OAAOtF,CAAP,EAAOA;AACP;AAIF;;AAAA,QAAMuF,CAAAA,GAAKD,QAAAA,CAASE,aAATF,CAAuB,GAAvBA,CAAX;AACAC,EAAAA,CAAAA,CAAGX,IAAHW,GAAUF,CAAVE,EAEIA,CAAAA,CAAGhD,QAAHgD,KAAgBlD,MAAAA,CAAOC,QAAPD,CAAgBE,QAAhCgD,IACFlD,MAAAA,CAAOC,QAAPD,CAFU,MAEVA,CAFU,GAAEkD,CAAAA,CAAGhD,QAAAA,GAAWgD,CAAAA,CAAGE,IAAAA,GAAOF,CAAAA,CAAGG,MAAAA,EAEvCrD,CAHFkD;AACyCG;;AAAAA,SAAAA,CAAAA,CC2dpBrB,CD3doBqB,EC2ddpB,CD3dcoB,EC2ddpB;AAC5B,MAAA;AACC,QAAIC,CAAAA,GAASF,CAAAA,EAAb;AACC,GAFF,CAEE,OAAMG,CAAN,EAAMA;AACP,WAAOF,CAAAA,CAAQE,CAARF,CAAP;AAED;;AAAA,SAAIC,CAAAA,IAAUA,CAAAA,CAAOE,IAAjBF,GACIA,CAAAA,CAAOE,IAAPF,CAAOE,KAAK,CAAZF,EAAoBD,CAApBC,CADJA,GAGGA,CAHP;AAGOA;;AAAAA,MA3Yc+B,CAAAA,GAAAA,iBAAkCH;AAAAA,MAAlCG;AAAsBT,IAAAA,QAAAA,EAAEA,CAAxBS;AAAsBT,IAAAA,gBAAAA,EAAYM;AAAlCG,GAAkCH;;AAAAA,MAAAA;AAAAA,WAAAA,OAAAA,CAAAA,OAAAA,CAAAA,CAAAA,CAAAA,YAAAA;AAEpD,UAAA,CAAK/G,CAAAA,CAAME,MAANF,CAAauE,WAAlB,EACE,MAAA,IAAUxD,KAAV,CACG,0EADH,CAAA;AAFA,aAAA,OAAA,CAAA,OAAA,CAOqBoB,CAAAA,CACpB,aADoBA,EAErB;AACEK,QAAAA,QAAAA,EAAUxC,CAAAA,CAAMwC,QADlB;AAEEiE,QAAAA,QAAAA,EAAAA,CAFF;AAGEM,QAAAA,gBAAAA,EAAAA;AAHF,OAFqB5E,EAOrB;AACE2C,QAAAA,OAAAA,EAAS;AACPsC,UAAAA,aAAAA,EAAgB,YAASpH,CAAAA,CAAME,MAANF,CAAauE;AAD/B;AADX,OAPqBpC,CAPrB,EAgB0CoC,IAhB1C,CAgB0CA,iBATpCtD;AAAAA,YASoCsD;AATtCtD,UAAAA,IAAAA,EAAEA;AASoCsD,SATpCtD;AAcR,eAAOA,CAAP;AAAOA,OArBL,CAAA;AAqBKA,KAtB6C8F,EAsB7C9F,UACAL,CADAK,EACAL;AACPE,MAAAA,CAAAA,CAAoBF,CAApBE,CAAAA;AAAoBF,KAxBgCmG,CAAAA,CAAAA;AAAxD,GAAwDA,CAAxD,OAAA,CAAA,EAAA;AAAA,WAAA,OAAA,CAAA,MAAA,CAAA,CAAA,CAAA;AAAA;AAAA,CA2YQ5B;AAAAA,MAzac8B,CAAAA,GAAAA,iBAIpBrB;AAAAA,MAJoBqB;AAAuBD,IAAAA,IAAAA,EAC3CA,CADoBC;AAAuBD,IAAAA,KAAAA,EAE3C3G,CAFoB4G;AAAuBD,IAAAA,QAAAA,EAG3CP,CAHoBQ;AAAuBD,IAAAA,QAAAA,EAI3CpB;AAJoBqB,GAIpBrB;;AAAAA,MAAAA;AAAAA,WAAAA,OAAAA,CAAAA,OAAAA,CAAAA,CAAAA,CAAAA,YAAAA;AAKE,UAFAvF,CAAAA,GAAQA,CAAAA,IAASiF,CAAAA,CAAa,OAAbA,CAAjBjF,EACA2G,CAAAA,GAAOA,CAAAA,IAAQ1B,CAAAA,CAAa,MAAbA,CADfjF,EAC4B,CACvBA,CADuB,IACvBA,CAAU2G,CAAf,EAAqB,MAAA,IAAUjG,KAAV,CAAgB,uBAAhB,CAAA;AAHnB,aAAA,OAAA,CAAA,OAAA,CAIqBoB,CAAAA,CAAK,aAALA,EAAmB;AACxCK,QAAAA,QAAAA,EAAUxC,CAAAA,CAAMwC,QADwB;AAExCwE,QAAAA,IAAAA,EAAAA,CAFwC;AAGxC3G,QAAAA,KAAAA,EAAAA,CAHwC;AAIxCoG,QAAAA,QAAAA,EAAAA;AAJwC,OAAnBtE,CAJrB,EAQAsE,IARA,CAQAA,iBAJMxF;AAAAA,YAINwF;AAJIxF,UAAAA,IAAAA,EAAEA;AAINwF,SAJMxF;AAAAA,YAMJA,CAAAA,CAAKf,MANDe,EASN,OAFAgD,CAAAA,CAAoBhD,CAAAA,CAAKf,MAAzB+D,CAAAA,EACA0B,CAAAA,CAAe;AAAEC,UAAAA,QAAAA,EAAAA,CAAF;AAAY3E,UAAAA,IAAAA,EAAAA;AAAZ,SAAf0E,CADA1B,EAEOhD,CAAP;AAEA,cAAA,IAAUF,KAAV,CACE,gEADF,CAAA;AACE,OAhBF,CAAA;AAgBE,KAlBN6E,EAkBM,UAGGhF,CAHH,EAGGA;AACPE,MAAAA,CAAAA,CAAoBF,CAApBE,CAAAA;AAAoBF,KAtBtBgF,CAAAA,CAAAA;AAJF,GAIEA,CAJF,OAAA,CAAA,EAAA;AAAA,WAAA,OAAA,CAAA,MAAA,CAAA,CAAA,CAAA;AAAA;AAAA,CAyaQT;AAAAA,MAzcc0B,CAAAA,GAAAA,iBAMpBjB;AAAAA,MANoBiB;AAAeC,IAAAA,MAAAA,EACnCA,CADoBD;AAAeC,IAAAA,QAAAA,EAEnCL,CAFoBI;AAAeC,IAAAA,gBAAAA,EAGnCC,CAHoBF;AAAeC,IAAAA,IAAAA,EAInCE,CAJoBH;AAAeC,IAAAA,KAAAA,EAKnCzG,CALoBwG;AAAeC,IAAAA,QAAAA,EAMnClB;AANoBiB,GAMpBjB;;AAAAA,MAAAA;AAEA,YAAQkB,CAAR;AAEE,WAAK,MAAL;AACE,eAAOG,CAAAA,CAAuB;AAAED,UAAAA,IAAAA,EAAAA,CAAF;AAAQ3G,UAAAA,KAAAA,EAAAA,CAAR;AAAeoG,UAAAA,QAAAA,EAAAA,CAAf;AAAyBb,UAAAA,QAAAA,EAAAA;AAAzB,SAAvBqB,CAAP;;AACF,WAAK,KAAL;AACE,eAAOC,CAAAA,CAAsB;AAAET,UAAAA,QAAAA,EAAAA,CAAF;AAAYM,UAAAA,gBAAAA,EAAAA;AAAZ,SAAtBG,CAAP;;AACF;AAIE,YAFA7G,CAAAA,GAAQA,CAAAA,IAASiF,CAAAA,CAAa,OAAbA,CAAjBjF,EAA8B,CAC9B2G,CAAAA,GAAOA,CAAAA,IAAQ1B,CAAAA,CAAa,MAAbA,CADe,KAElBjF,CAAZ,EACE,OAAO4G,CAAAA,CAAuB;AAAED,UAAAA,IAAAA,EAAAA,CAAF;AAAQ3G,UAAAA,KAAAA,EAAAA,CAAR;AAAeoG,UAAAA,QAAAA,EAAAA,CAAf;AAAyBb,UAAAA,QAAAA,EAAAA;AAAzB,SAAvBqB,CAAP;AAAuDrB,YAC9C5F,CAAAA,CAAME,MAANF,CAAauE,WADiCqB,EAEvD,OAAOsB,CAAAA,CAAsB;AAAET,UAAAA,QAAAA,EAAAA,CAAF;AAAYM,UAAAA,gBAAAA,EAAAA;AAAZ,SAAtBG,CAAP;AAEA,cAAA,IAAUnG,KAAV,CACE,4FADF,CAAA;AAfN;AARF,GAME6E,CANF,OAAA,CAAA,EAAA;AAAA,WAAA,OAAA,CAAA,MAAA,CAAA,CAAA,CAAA;AAAA;AAAA,CAycQT;AAAAA,MA3aKgC,CAAAA,GAAgBN,CA2arB1B;;AA3aqB0B,SCtHbW,CDsHaX,QCtHajB;AAAAA,MAA1B4B;AAAcH,IAAAA,QAAAA,EAAEA,CAAhBG;AAAcH,IAAAA,QAAAA,EAAYzB;AAA1B4B,GAA0B5B;AACxC,MAAA,CAAKyB,CAAL,EAAe,MAAA,IAAUtG,KAAV,CAAgB,kBAAhB,CAAA;;AACf,QAAMe,CAAAA,GAAAA,kBAzBoC8D;AAAAA,QAyBpC9D;AAzBwBuF,MAAAA,QAAAA,EAAEA,CAyB1BvF;AAzBwBuF,MAAAA,QAAAA,EAAYzB;AAyBpC9D,KAzBoC8D;AAC1C,QAAA,CAAKyB,CAAL,EAAe,MAAA,IAAUtG,KAAV,CAAgB,kBAAhB,CAAA;AACf,QAAA,CAAKf,CAAAA,CAAMwC,QAAX,EAAqB,MAAA,IAAUzB,KAAV,CAAgB,kBAAhB,CAAA;AAErB,QAAIe,CAAAA,GAAO,GAAE9B,CAAAA,CAAM+B,OAAAA,QAAesF,CAAAA,oBAA4BrH,CAAAA,CAAMwC,QAAAA,WAAmBS,MAAAA,CAAOC,QAAPD,CAAgBqE,MAAAA,EAAvG;AAAA,QAEIzB,CAAAA,GAAaD,CAAAA,IAAYN,CAAAA,CAAa,UAAbA,CAF7B;AAUA,WAAA,CAPiB,CAOjB,KAPIM,CAOJ,KANEC,CAAAA,GAAiC,YAAA,OAAbK,QAAa,IAAYA,QAAAA,CAAShD,QAATgD,CAAkB/C,QAMjE,GAJI0C,CAAAA,KACF/D,CAAAA,IAAQ,eAAYyF,kBAAAA,CAAmB1B,CAAnB0B,CADlB1B,CAIJ,EAAO/D,CAAP;AAWY2F,GAAN3F,CAAsB;AAAEuF,IAAAA,QAAAA,EAAAA,CAAF;AAAYzB,IAAAA,QAAAA,EAAAA;AAAZ,GAAtB9D,CAAN;;AACAmB,EAAAA,MAAAA,CAAOC,QAAPD,CAAgByE,MAAhBzE,CAAuBnB,CAAvBmB;AAAuBnB;;AAAAA,SAAAA,CAAAA,CCqhBFmD,CDrhBEnD,ECqhBIoD,CDrhBJpD,ECqhBIoD;AAC5B,MAAA;AACC,QAAIC,CAAAA,GAASF,CAAAA,EAAb;AACC,GAFF,CAEE,OAAMG,CAAN,EAAMA;AACP,WAAOF,CAAAA,CAAQE,CAARF,CAAP;AAED;;AAAA,SAAIC,CAAAA,IAAUA,CAAAA,CAAOE,IAAjBF,GACIA,CAAAA,CAAOE,IAAPF,CAAOE,KAAK,CAAZF,EAAoBD,CAApBC,CADJA,GAGGA,CAHP;AAGOA;;AAAAA,MA5fcwC,CAAAA,GAAAA,kBAKpB9F;AAAAA,MALoB8F;AAAqBnB,IAAAA,KAAAA,EACzCA,CADoBmB;AAAqBnB,IAAAA,IAAAA,EAEzC1D,CAFoB6E;AAAqBnB,IAAAA,QAAAA,EAGzCD,CAHoBoB;AAAqBnB,IAAAA,QAAAA,EAIzCE,CAJoBiB;AAAqBnB,IAAAA,OAAAA,EAKzC3E;AALoB8F,GAKpB9F;;AAAAA,MAAAA;AAAAA,WAAAA,OAAAA,CAAAA,OAAAA,CAAAA,CAAAA,CAAAA,YAAAA;AAAAA,aAAAA,OAAAA,CAAAA,OAAAA,CAGyBI,CAAAA,CAAM,YAANA,EAAmB;AACxCuE,QAAAA,KAAAA,EAAAA,CADwC;AAExC1D,QAAAA,IAAAA,EAAAA,CAFwC;AAGxCyD,QAAAA,QAAAA,EAAAA,CAHwC;AAIxCtF,QAAAA,IAAAA,EAAMyF,CAJkC;AAKxC7E,QAAAA,OAAAA,EAAAA,CALwC;AAMxCW,QAAAA,QAAAA,EAAUxC,CAAAA,CAAMwC;AANwB,OAAnBP,CAHzBJ,EASoBW,IATpBX,CASoBW,kBANVvB;AAAAA,YAMUuB;AANZvB,UAAAA,IAAAA,EAAEA;AAMUuB,SANVvB;AAQR,eAAOA,CAAP;AAAOA,OAXTY,CAAAA;AAWSZ,KAXTY,EAWSZ,UACAL,CADAK,EACAL;AACPE,MAAAA,CAAAA,CAAoBF,CAApBE,CAAAA;AAAoBF,KAbtBiB,CAAAA,CAAAA;AALF,GAKEA,CALF,OAAA,CAAA,EAAA;AAAA,WAAA,OAAA,CAAA,MAAA,CAAA,CAAA,CAAA;AAAA;AAAA,CA4fQsD;;AA5fR,SAAA,CAAA,CCmfuBF,CDnfvB,ECmf6BC,CDnf7B,ECmf6BA;AAC5B,MAAA;AACC,QAAIC,CAAAA,GAASF,CAAAA,EAAb;AACC,GAFF,CAEE,OAAMG,CAAN,EAAMA;AACP,WAAOF,CAAAA,CAAQE,CAARF,CAAP;AAED;;AAAA,SAAIC,CAAAA,IAAUA,CAAAA,CAAOE,IAAjBF,GACIA,CAAAA,CAAOE,IAAPF,CAAOE,KAAK,CAAZF,EAAoBD,CAApBC,CADJA,GAGGA,CAHP;AA3iBD;;AAAA,SAASyC,CAAT,SAAgDpB;AAAAA,MAAvCoB;AAAeC,IAAAA,OAAAA,EAAEA,CAAjBD;AAAeC,IAAAA,WAAAA,EAAWC,CAA1BF;AAAeC,IAAAA,KAAAA,EAAwBrB;AAAvCoB,GAAuCpB;AAC9C,MAAgB,UAAZqB,CAAY,IAAqB,YAAZA,CAAzB,EACE,MAAA,IAAU9G,KAAV,CAAgB,iBAAhB,CAAA;AAEF,MAAgB,UAAZ8G,CAAY,IAAZA,CAAsBC,CAA1B,EACE,MAAA,IAAU/G,KAAV,CAAiB,8CAAjB,CAAA;AAAiB,MACI,YAAZ8G,CAAY,IAAZA,CAAwBrB,CADhB,EAEjB,MAAA,IAAUzF,KAAV,CAAiB,0CAAjB,CAAA;AAAiB;;AAAA,MAaCgH,CAAAA,GAAAA,kBAMpB9G;AAAAA,MANoB8G;AAAqBF,IAAAA,OAAAA,EACzCA,CAAAA,GAAU,KADUE;AAAqBF,IAAAA,WAAAA,EAEzCC,CAFoBC;AAAqBF,IAAAA,KAAAA,EAGzCrB,CAHoBuB;AAAqBF,IAAAA,IAAAA,EAIzC/E,CAJoBiF;AAAqBF,IAAAA,QAAAA,EAKzCtB,CALoBwB;AAAqBF,IAAAA,IAAAA,EAMzC5G;AANoB8G,GAMpB9G;;AAAAA,MAAAA;AAAAA,WAAAA,OAAAA,CAAAA,OAAAA,CAAAA,CAAAA,CAAAA,YAAAA;AAEI,aACF2G,CAAAA,CAAe;AACbC,QAAAA,OAAAA,EAAAA,CADa;AAEbC,QAAAA,WAAAA,EAAAA,CAFa;AAGbtB,QAAAA,KAAAA,EAAAA;AAHa,OAAfoB,CAAAA,EAGEpB,OAAAA,CAAAA,OAAAA,CAG0BvE,CAAAA,CAAM,YAANA,EAAmB;AAC7C4F,QAAAA,OAAAA,EAAAA,CAD6C;AAE7CrB,QAAAA,KAAAA,EAAAA,CAF6C;AAG7CsB,QAAAA,WAAAA,EAAAA,CAH6C;AAI7ChF,QAAAA,IAAAA,EAAAA,CAJ6C;AAK7CyD,QAAAA,QAAAA,EAAAA,CAL6C;AAM7CtF,QAAAA,IAAAA,EAAAA,CAN6C;AAO7CuB,QAAAA,QAAAA,EAAUxC,CAAAA,CAAMwC;AAP6B,OAAnBP,CAH1BuE,EAUgBhE,IAVhBgE,CAUgBhE,kBAPJwF;AAAAA,YAOIxF;AAPVvB,UAAAA,IAAAA,EAAM+G;AAOIxF,SAPJwF;AASd,eAAOA,CAAP;AAAOA,OAZLxB,CAJA;AAgBKwB,KAlBT/G,EAkBS+G,UACApH,CADAoH,EACApH;AACPE,MAAAA,CAAAA,CAAoBF,CAApBE,CAAAA;AAAoBF,KApBtBK,CAAAA,CAAAA;AANF,GAMEA,CANF,OAAA,CAAA,EAAA;AAAA,WAAA,OAAA,CAAA,MAAA,CAAA,CAAA,CAAA;AAAA;AAAA,CAbqB;;AAarB,SAAA,CAAA,CCihBuBgE,CDjhBvB,ECihB6BC,CDjhB7B,ECihB6BA;AAC5B,MAAA;AACC,QAAIC,CAAAA,GAASF,CAAAA,EAAb;AACC,GAFF,CAEE,OAAMG,CAAN,EAAMA;AACP,WAAOF,CAAAA,CAAQE,CAARF,CAAP;AAED;;AAAA,SAAIC,CAAAA,IAAUA,CAAAA,CAAOE,IAAjBF,GACIA,CAAAA,CAAOE,IAAPF,CAAOE,KAAK,CAAZF,EAAoBD,CAApBC,CADJA,GAGGA,CAHP;ACNM;;AAAA,SAASoD,CAAT,CAAgBtD,CAAhB,EAAsBC,CAAtB,EAAsBA;AAC5B,MAAA;AACC,QAAIC,CAAAA,GAASF,CAAAA,EAAb;AACC,GAFF,CAEE,OAAMG,CAAN,EAAMA;AACP,WAAOF,CAAAA,CAAQE,CAARF,CAAP;AAED;;AAAA,SAAIC,CAAAA,IAAUA,CAAAA,CAAOE,IAAjBF,GACIA,CAAAA,CAAOE,IAAPF,CAAOE,KAAK,CAAZF,EAAoBD,CAApBC,CADJA,GAGGA,CAHP;AAGOA;;AAAAA,MCzjBKqD,CAAAA,GACX,sGDwjBMrD;AAAAA,MEphBcuD,CAAAA,GAAAA,YAAAA;AAAAA,MAAAA;AAAAA,UAAAA,CAAAA,GA2gBf,UAAgBzD,CAAhB,EAAsBC,CAAtB,EAAsBA;AAC5B,UAAA;AACC,YAAIC,CAAAA,GAAAA,OAAAA,CAAAA,OAAAA,CA3gBqBxD,CAAAA,CAAK,YAAW3B,CAAAA,CAAMwC,QAAAA,OAAtBb,CA2gBrBwD,EA3gB2C3C,IA2gB3C2C,CA3gB2C3C,kBAArCvB;AAAAA,cAAqCuB;AAAvCvB,YAAAA,IAAAA,EAAEA;AAAqCuB,WAArCvB;AACRd,UAAAA,CAAAA,CAAKkC,KAALlC,GAAac,CAAAA,CAAKd,IAALc,IAAa,MAA1Bd,EACAA,CAAAA,CAAKsI,MAALtI,GAAc4I,CAAAA,CAAU5I,CAAAA,CAAKkC,KAAf0G,CADd5I,EAEAH,CAAAA,CAAMG,IAANH,GAAaG,CAAAA,CAAKkC,KAFlBlC;AAEkBkC,SAwgBhB8C,CAAJ;AACC,OAFF,CAEE,OAAMC,CAAN,EAAMA;AACP,eAAOF,CAAAA,EAAP;AAED;;AAAA,aAAIC,CAAAA,IAAUA,CAAAA,CAAOE,IAAjBF,GACIA,CAAAA,CAAOE,IAAPF,CAAOE,KAAK,CAAZF,EAAoBD,CAApBC,CADJA,GAGGA,CAHP;AAGOA,KATD,CASCA,CATD,EASCA,YAAAA;AA7gBJhF,MAAAA,CAAAA,CAAKkC,KAALlC,GAAa,MAAbA,EACAH,CAAAA,CAAMG,IAANH,GAAaG,CAAAA,CAAKkC,KADlBlC;AACkBkC,KAmgBf,CA3gBeqG;;AAQArG,WAAAA,OAAAA,CAAAA,OAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,IAAAA,GAAAA,CAAAA,CAAAA,IAAAA,CAAAA,YAAAA,CAAAA,CAAAA,CAAAA,GAAAA,KAAAA,CAAAA,CAAAA;AARtB,GAAsBqG,CAAtB,OAAA,CAAA,EAAA;AAAA,WAAA,OAAA,CAAA,MAAA,CAAA,CAAA,CAAA;AAAA;AAAA,CFohBQvD;AAAAA,MEpjBKhF,CAAAA,GAAO;AAClBkC,EAAAA,KAAAA,EAAO,MADW;AAElBoG,EAAAA,MAAAA,EAAAA,KAAQjF,CAFU;AAGlBkF,EAAAA,OAAAA,EAAAA;AAHkB,CFojBZvD;;AEjjBNuD,SA4CcC,CA5CdD,GA4CcC;AACd,QAAMK,CAAAA,GApCR,UAA+BJ,CAA/B,EAA+BA;AAC7B,QAAA;AACE,YAAMxF,CAAAA,GAAiBH,MAAAA,CAAOC,QAAPD,CAAgBG,QAAvC;AACA,aAAA,EAAA,CAAUA,CAAAA,CAASyF,KAATzF,CAAe,YAAfA,CAAV,IAAyB,CAAiBA,CAAAA,CAASyF,KAATzF,CAAeoF,CAAfpF,CAA1C,CAAA;AACA,KAHF,CAGE,OAAOK,CAAP,EAAOA;AACP,aAAA,CAAA,CAAA;AAAA;AA+BgBwF,GApCpB,MAoCoBA,CA3BpB,YAAA;AACE,QAAA;AACE,aAAoC,aAA7BhG,MAAAA,CAAOC,QAAPD,CAAgB6F,QAAvB;AACA,KAFF,CAEE,OAAOlI,CAAP,EAAOA;AACP,aAAA,CAAA,CAAA;AAAA;AAuBqCsI,GA3BzC,EATA,GAoCqD,MApCrD,GAoC8D,MAA5D;AACA/I,EAAAA,CAAAA,CAAKkC,KAALlC,GAAa6I,CAAb7I,EACAA,CAAAA,CAAKsI,MAALtI,GAAc4I,CAAAA,CAAUC,CAAVD,CADd5I,EAEAH,CAAAA,CAAMG,IAANH,GAAagJ,CAFb7I;AAUF;;AAAA,SAAS4I,CAAT,CAAmB5I,CAAnB,EAAmBA;AACjB,MAAA;AACE,WAAa,WAATA,CAAS,GACJ,QADI,GAGoB,YAA7B8C,MAAAA,CAAOC,QAAPD,CAAgB6F,QAAa,GACxB,MADwB,GAEO,aAA7B7F,MAAAA,CAAOC,QAAPD,CAAgB6F,QAAa,GAC/B,UAD+B,GAG/B,QART;AAUA,GAXF,CAWE,OAAOlI,CAAP,EAAOA,CAAAA;AAjEX+H;;AAAAA,CAAAA,ICiDA3I,CAAAA,CAAMC,IAAND,CAAWwJ,MAAXxJ,GAAWwJ,UA9CkBtH,CA8ClBsH,EA9CkBtH;AAAAA,MAAAA;AAC3B,WAAA,CAAKA,CAAL,IAAgBiH,MAAAA,CAAOC,IAAPD,CAAYjH,CAAZiH,EAAqBE,MAArBF,GAA8B,CAA9C,GAA8C,OAAA,CAAA,OAAA,CACrCtI,OAAAA,CAAQO,IAARP,CAAa,mCAAbA,CADqC,CAA9C,GACsB,OAAA,CAAA,OAAA,CAIhBsB,CAAAA,CAAK,OAALA,EAAaD,CAAbC,EAAsB;AAC1B2C,MAAAA,OAAAA,EAAS;AACPC,QAAAA,aAAAA,EAAgB,YAAS/E,CAAAA,CAAME,MAANF,CAAauE;AAD/B;AADiB,KAAtBpC,CAJgB,EAMoBoC,IANpB,CAMoBA,YAAAA;AAAAA,aAAAA,OAAAA,CAAAA,OAAAA,CAKpCF,CAAAA,EALoCE,EAKpCF,IALoCE,CAKpCF,YAAAA;AAEN,eAAOrE,CAAAA,CAAMC,IAAb;AAAaA,OAP6BsE,CAAAA;AAO7BtE,KAbS,CADtB;AADF,GAA6BiC,CAA7B,OAAA,CAAA,EAAA;AAAA,WAAA,OAAA,CAAA,MAAA,CAAA,CAAA,CAAA;AAAA;AAAA,CDHAyG,ECkDA3I,CAAAA,CAAMC,IAAND,CAAWyJ,OAAXzJ,GAAWyJ,UAvBaH,CAuBbG,EAvBsC;AAAA,MAAzBH;AAAU9G,IAAAA,QAAAA,EAAEA;AAAZ8G,GAAyB,uEAAA,EAAA;;AAC/C,MAAA;AACE,QAAA,CAAKtJ,CAAAA,CAAME,MAANF,CAAauE,WAAlB,IAAkBA,CAAgBvE,CAAAA,CAAMwC,QAAxC,EACE,OAAA,CAAA,CAAA;AAEF,UAAA;AAAMuC,MAAAA,aAAAA,EAAEA;AAAR,QAA0B3E,CAAAA,CAAcJ,CAAAA,CAAME,MAANF,CAAauE,WAA3BnE,CAA1B;AACA,WAAA,CAAA,CAAK2E,CAAL,IAAKA,EAAAA,CAIAA,CAAAA,CADLvC,CAAAA,GAAWA,CAAAA,IAAYxC,CAAAA,CAAMwC,QACxBuC,CAJAA,IAGwBvC,CACIuC,CAAAA,CAAcvC,CAAduC,CAAAA,CAAwBwE,KAJpDxE,CAAL,IAOOA,CAAAA,CAAcvC,CAAduC,CAAAA,CAAwBwE,KAAxBxE,CAA8BU,OAA9BV,CAAsCuE,CAAtCvE,IAAsCuE,CAAa,CAP1D;AAQA,GAbF,CAaE,OAAO1I,CAAP,EAAOA;AACP,WAAA,CAAA,CAAA;AAAA;AAAA,CD1CJ+H,ECmDA3I,CAAAA,CAAMC,IAAND,CAAW6G,cAAX7G,GAA4B6G,CDnD5B8B,ECoDA3I,CAAAA,CAAMC,IAAND,CAAW0J,OAAX1J,GAAW0J,YAAAA;AAAAA,MAAAA;AAAAA,WAAAA,OAAAA,CAAAA,OAAAA,CAAAA,CAAAA,CAAAA,YAAAA;AJCP,UAAA,CAAK1J,CAAAA,CAAME,MAANF,CAAauE,WAAlB,EACE,MAAA,IAAUxD,KAAV,CAAiB,kDAAjB,CAAA;AAFA,aAAA,OAAA,CAAA,OAAA,CAKqBY,CAAAA,CAAK,YAALA,EAAkB;AACvCmD,QAAAA,OAAAA,EAAS;AACPsC,UAAAA,aAAAA,EAAgB,YAASpH,CAAAA,CAAME,MAANF,CAAauE;AAD/B;AAD8B,OAAlB5C,CALrB,EAOwC4C,IAPxC,CAOwCA,kBAFlCtD;AAAAA,YAEkCsD;AAFpCtD,UAAAA,IAAAA,EAAEA;AAEkCsD,SAFlCtD;AAMR,eAAOA,CAAP;AAAOA,OAXL,CAAA;AAWKA,KIXAyI,EJWAzI,UACAL,CADAK,EACAL;AACPE,MAAAA,CAAAA,CAAoBF,CAApBE,CAAAA;AAAoBF,KIbb8I,CAAAA,CAAAA;AJDX,GICWA,CJDX,OAAA,CAAA,EAAA;AAAA,WAAA,OAAA,CAAA,MAAA,CAAA,CAAA,CAAA;AAAA;AAAA,CGnDAf;AHmDA,IKxCIgB,CAAAA,GAAgB,ELwCpB;AAAA,IKaIQ,CAAAA,GAAAA,CAAe,CLbnB;AK4CA,IAAA,CAAA,GAAe;AAEbY,EAAAA,eAAAA,EA3CF,UAAyBd,CAAzB,EAAyBA;AAClBA,IAAAA,CAAAA,IAAoB,cAAA,OAAPA,CAAbA,IACLN,CAAAA,CAAcO,IAAdP,CAAmBM,CAAnBN,CADKM;AACcA,GAuCN;AAGbe,EAAAA,IAAAA,EAjFF,UAAcxI,CAAd,EAA+B;AAAA,QAAPoH,CAAO,uEAAA,EAAA;AAC7B,QAAA,CAAKpH,CAAL,EAAe,OAAO3B,OAAAA,CAAQO,IAARP,CAAa,wCAAbA,CAAP;;AASf,QAPAb,CAAAA,CAAMwC,QAANxC,GAAiBwC,CAAjBxC,EAEAA,CAAAA,CAAM+B,OAAN/B,GAAgB4J,CAAAA,CAAK7H,OAAL6H,IHnCK,+BGiCrB5J,EAGKA,CAAAA,CAAM+B,OAAN/B,CAAc6J,QAAd7J,CAAuB,GAAvBA,MACHA,CAAAA,CAAM+B,OAAN/B,IAAiB,GADdA,CAHLA,EAOI4J,CAAAA,CAAKjG,MAAT,EAAiB;AACf3D,MAAAA,CAAAA,CAAM2D,MAAN3D,GAAe4J,CAAAA,CAAKjG,MAApB3D;AACA,YAAM8B,CAAAA,GAAO,aAAU9B,CAAAA,CAAM2D,MAA7B;AACA3B,MAAAA,CAAAA,CAAM8H,QAAN9H,CAAe8C,OAAf9C,CAAuB+H,MAAvB/H,CAA8B,kBAA9BA,IAAoDF,CAApDE,EACAA,CAAAA,CAAM8H,QAAN9H,CAAe8C,OAAf9C,CAAuB+H,MAAvB/H,CAA8B,UAA9BA,IAA4CF,CAD5CE;AZlCFhC;;AAAAA,IAAAA,CAAAA,CAAME,MAANF,GAAeA,CAAAA,CAAME,MAANF,IAAgB,EAA/BA,EACAA,CAAAA,CAAME,MAANF,CAAa8D,eAAb9D,GAAgC,YAASA,CAAAA,CAAMwC,QAD/CxC,EAEAA,CAAAA,CAAME,MAANF,CAAa+D,WAAb/D,GAA4B,QAAKA,CAAAA,CAAMwC,QAFvCxC,EAGAA,CAAAA,CAAME,MAANF,CAAagE,gBAAbhE,GAAiC,aAAUA,CAAAA,CAAMwC,QAHjDxC,EYwCAsE,CAAAA,EZxCAtE,EYyCA2I,CAAAA,EZzCA3I;;AY2CA,QAAA;AACM2J,MAAAA,CAAAA,CAAcN,MAAdM,GAAuB,CAAvBA,IACFA,CAAAA,CAAcK,OAAdL,CAAuBM,CAAAA,IAAAA;AAChBA,QAAAA,CAAAA,IAAoB,cAAA,OAAPA,CAAbA,IACLA,CAAAA,CAAG;AAAEzH,UAAAA,QAAAA,EAAAA;AAAF,SAAHyH,CADKA;AACAzH,OAFPmH,CADEA,EAMJA,CAAAA,GAAgB,EANZA;AAOJ,KARF,CAQE,OAAO/I,CAAP,EAAOA,CAAAA;AAAAA,GAgDI;AAIbqK,EAAAA,+BAAAA,EAlCF,YAAA;AACE,QAAA,CAAId,CAAJ,EAAA;AACAA,MAAAA,CAAAA,GAAAA,CAAe,CAAfA;;AACA,UAAA;AACEC,QAAAA,OAAAA,CAAQC,SAARD,IAAsBE,CAAAA,GAMjBF,OAAAA,CAAQC,SANSC,EACpB,YAAA;AACE,cAAIC,CAAAA,GAAMD,CAAAA,CAAEE,KAAFF,CAAQG,IAARH,EAAcI,SAAdJ,CAAV;AAGA,iBAFArH,MAAAA,CAAO0H,aAAP1H,CAAqB,IAAI2H,KAAJ,CAAU,WAAV,CAArB3H,GACAA,MAAAA,CAAO0H,aAAP1H,CAAqB,IAAI2H,KAAJ,CAAU,YAAV,CAArB3H,CADAA,EAEOsH,CAAP;AAAOA,SALXH,GAQAA,OAAAA,CAAQS,YAART,GAAuB,CAAEE,CAAAA,IACvB,YAAA;AACE,cAAIC,CAAAA,GAAMD,CAAAA,CAAEE,KAAFF,CAAQG,IAARH,EAAcI,SAAdJ,CAAV;AAGA,iBAFArH,MAAAA,CAAO0H,aAAP1H,CAAqB,IAAI2H,KAAJ,CAAU,cAAV,CAArB3H,GACAA,MAAAA,CAAO0H,aAAP1H,CAAqB,IAAI2H,KAAJ,CAAU,YAAV,CAArB3H,CADAA,EAEOsH,CAAP;AALmB,SAAA,EAMlBH,OAAAA,CAAQS,YANU,CARvBT,EAgBAnH,MAAAA,CAAO6H,gBAAP7H,CAAwB,UAAxBA,EAAoC,MAAA;AAClCA,UAAAA,MAAAA,CAAO0H,aAAP1H,CAAqB,IAAI2H,KAAJ,CAAU,YAAV,CAArB3H;AAA+B,SADjCA,CAhBAmH;AAmBA,OApBF,CAoBE,OAAOxJ,CAAP,EAAOA,CAnBa;;AAAA,UAAE0J,CAAF;AAAEA;AAAAA,GA0BX;AAObY,EAAAA,MAAAA,EAAAA,YJxGkD;AAAA,QIwGlDA;AJxG2BpE,MAAAA,MAAAA,EAAEA,CIwG7BoE;AJxG2BpE,MAAAA,QAAAA,EAAUlB;AIwGrCsF,KJxGkD,uEAAA,EAAA;;AAAA,QAAA;AAClD,UAAe,WAAXpE,CAAJ,EACE,OAAA,YAAA;AAAA,YAAA;AAoBF,cAAA,CAAK9G,CAAAA,CAAME,MAANF,CAAauE,WAAlB,EACE,MAAA,IAAUxD,KAAV,CAAgB,iDAAhB,CAAA;AAFgC,gBAAA,CAAA,GAAA,CAAA,CAAA,YAAA;AAAA,mBAAA,OAAA,CAAA,OAAA,CAMTY,CAAAA,CAAK,sBAALA,EAA4B;AACjDmD,cAAAA,OAAAA,EAAS;AACPC,gBAAAA,aAAAA,EAAgB,YAAS/E,CAAAA,CAAME,MAANF,CAAauE;AAD/B;AADwC,aAA5B5C,CANS,EAQU4C,IARV,CAQUA,kBAFlCtD;AAAAA,kBAEkCsD;AAFpCtD,gBAAAA,IAAAA,EAAEA;AAEkCsD,eAFlCtD;AAMRgC,cAAAA,MAAAA,CAAOC,QAAPD,CAAgByE,MAAhBzE,CACG,GAAEjD,CAAAA,CAAM+B,OAAAA,kCAAyC/B,CAAAA,CAAMwC,QAAAA,UAAkBvB,CAAAA,CAAKZ,KAAAA,SAAcL,CAAAA,CAAMC,IAAND,CAAWqI,QAAAA,EAD1GpF;AAC0GoF,aAb1E,CAAA;AAa0EA,WAb1E,EAa0EA,UAEnGzH,CAFmGyH,EAEnGzH;AACPE,YAAAA,CAAAA,CAAoBF,CAApBE,CAAAA;AAAoBF,WAhBY,CAAA;AAgBZA,iBAAAA,OAAAA,CAAAA,OAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,IAAAA,GAAAA,CAAAA,CAAAA,IAAAA,CAAAA,YAAAA,CAAAA,CAAAA,CAAAA,GAAAA,KAAAA,CAAAA,CAAAA;AAAAA,SAnCpB,CAmCoBA,OAAAA,CAAAA,EAAAA;AAAAA,iBAAAA,OAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA;AAAAA;AAnCb0H,OAAP,EAAA;AAEF,UAAA,CAAKtI,CAAAA,CAAME,MAANF,CAAauE,WAAlB,EACE,OAAA,OAAA,CAAA,OAAA,CAAOV,CAAAA,EAAP,CAAA;AALoD,YAAA,CAAA,GAAA,CAAA,CAAA,YAAA;AAAA,eAAA,OAAA,CAAA,OAAA,CAS7BlC,CAAAA,CAAK,cAALA,EAAoB;AACzCmD,UAAAA,OAAAA,EAAS;AACPC,YAAAA,aAAAA,EAAgB,YAAS/E,CAAAA,CAAME,MAANF,CAAauE;AAD/B;AADgC,SAApB5C,CAT6B,EAWV4C,IAXU,CAWVA,kBAFlCtD;AAAAA,cAEkCsD;AAFpCtD,YAAAA,IAAAA,EAAEA;AAEkCsD,WAFlCtD;AAKR4C,UAAAA,CAAAA,IACA8B,CAAAA,CAAe;AAAEC,YAAAA,QAAAA,EAAAA,CAAF;AAAY3E,YAAAA,IAAAA,EAAAA;AAAZ,WAAf0E,CADA9B;AAC2B5C,SAfyB,CAAA;AAezBA,OAfyB,EAezBA,YAAAA;AAE3B4C,QAAAA,CAAAA;AAAAA,OAjBoD,CAAA;AAiBpDA,aAAAA,OAAAA,CAAAA,OAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,IAAAA,GAAAA,CAAAA,CAAAA,IAAAA,CAAAA,YAAAA,CAAAA,CAAAA,CAAAA,GAAAA,KAAAA,CAAAA,CAAAA;AAjBJ,KAAoD,CAApD,OAAA,CAAA,EAAA;AAAA,aAAA,OAAA,CAAA,MAAA,CAAA,CAAA,CAAA;AAAA;AAAA,GIiGe;AAUb1D,EAAAA,IAAAA,EAAAA,CAVa;AAWbuI,EAAAA,OAAAA,EAAAA,CAXa;AAcbrE,EAAAA,OAAAA,EAAS,CAAC8G,CAAD,EAAIC,CAAJ,EAAOC,CAAP,KAAOA;AACd,QAAA;AACExK,MAAAA,OAAAA,CAAQO,IAARP,CACE,uGADFA;AAGA,KAJF,CAIE,OAAOD,CAAP,EAAOA,CACT;;AAAA,WAAOyD,CAAAA,EAAP;AAAOA,GApBI;AAwBbiH,EAAAA,KAAAA,EAAAA,YCpFE;AAAA,QDoFFA;AC1G0BxE,MAAAA,MAAAA,EAC1BA,CDyGAwE;AC1G0BxE,MAAAA,MAAAA,EAG1BsB,CDuGAkD;AC1G0BxE,MAAAA,QAAAA,EAI1BuB,CDsGAiD;AC1G0BxE,MAAAA,KAAAA,EAK1BN,CDqGA8E;AC1G0BxE,MAAAA,QAAAA,EAM1BP,CDoGA+E;AC1G0BxE,MAAAA,eAAAA,EAO1BH,CDmGA2E;AC1G0BxE,MAAAA,WAAAA,EAQ1BgB,CDkGAwD;AC1G0BxE,MAAAA,QAAAA,EAU1BL,CDgGA6E;AC1G0BxE,MAAAA,KAAAA,EAY1BzG,CD8FAiL;AC1G0BxE,MAAAA,IAAAA,EAa1BE,CD6FAsE;AC1G0BxE,MAAAA,QAAAA,EAe1BoB,CD2FAoD;AC1G0BxE,MAAAA,UAAAA,EAgB1BqB,CD0FAmD;AC1G0BxE,MAAAA,OAAAA,EAkB1Be,CDwFAyD;AC1G0BxE,MAAAA,gBAAAA,EAmB1BmB,CDuFAqD;AC1G0BxE,MAAAA,QAAAA,EAqB1BlB;ADqFA0F,KCpFE,uEAAA,EAAA;;AAAA,QAAA;AACF,UAAA,CAAKxE,CAAL,EACE,MAAA,IAAU/F,KAAV,CAAgB,mDAAhB,CAAA;;AAEF,cAAQ+F,CAAR;AACE,aAAK,OAAL;AACA,aAAK,OAAL;AACA,aAAK,UAAL;AACA,aAAK,QAAL;AACA,aAAK,QAAL;AACA,aAAK,UAAL;AACE,iBAAA,OAAA,CAAA,OAAA,CAAOU,CAAAA,CAAc;AAAEH,YAAAA,QAAAA,EAAUP,CAAZ;AAAoBlB,YAAAA,QAAAA,EAAAA;AAApB,WAAd4B,CAAP,CAAA;;AACF,aAAK,UAAL;AACE,iBAAA,OAAA,CAAA,OAAA,CAAA,kBVJJ5B;AAAAA,gBUII;AVTkCY,cAAAA,KAAAA,EACtCA,CUQI;AVTkCA,cAAAA,QAAAA,EAEtCD,CUOI;AVTkCC,cAAAA,eAAAA,EAGtCG,CUMI;AVTkCH,cAAAA,QAAAA,EAItCC,CUKI;AVTkCD,cAAAA,QAAAA,EAKtCZ;AUII,aVJJA;;AAAAA,gBAAAA;AAAAA,qBAAAA,OAAAA,CAAAA,OAAAA,CAAAA,CAAAA,CAAAA,YAAAA;AAAAA,uBAAAA,OAAAA,CAAAA,OAAAA,CAGyB3D,CAAAA,CAAM,aAANA,EAAoB;AACzCO,kBAAAA,QAAAA,EAAUxC,CAAAA,CAAMwC,QADyB;AAEzCmE,kBAAAA,eAAAA,EAAiBH,CAAAA,IAASD,CAATC,IAAqBG,CAFG;AAGzCF,kBAAAA,QAAAA,EAAAA;AAHyC,iBAApBxE,CAHzB2D,EAMIa,IANJb,CAMIa,kBAHMxF;AAAAA,sBAGNwF;AAHIxF,oBAAAA,IAAAA,EAAEA;AAGNwF,mBAHMxF;AAAAA,sBAAAA,CAAAA;;AAAAA,2BAAAA,CAAAA,CAAAA,CAAAA,EAAAA;AAAAA,wBAAAA,CAAAA,EAAAA,OAAAA,CAAAA;AAaR,wBAAIA,CAAAA,CAAK2F,cAAL3F,CAAoB,iBAApBA,CAAJ,EACE,OAAOA,CAAP;AAGF,0BAAA,IAAUF,KAAV,CAAgB,mBAAhB,CAAA;AAAgB;;AAAA,wBAAA,CAAA,GAAA,YAAA;AAAA,wBAXZE,CAAAA,CAAK2F,cAAL3F,CAAoB,QAApBA,CAWY,EAlBd,OAQAgD,CAAAA,CAAoBhD,CAAAA,CAAKf,MAAzB+D,CAAAA,EAAyB/D,OAAAA,CAAAA,OAAAA,CACnB8E,CAAAA,CAAS/D,CAAT+D,CADmB9E,EACVe,IADUf,CACVe,YAAAA;AAAAA,6BACf0E,CAAAA,CAAe;AAAEC,wBAAAA,QAAAA,EAAAA,CAAF;AAAY3E,wBAAAA,IAAAA,EAAAA;AAAZ,uBAAf0E,CAAAA,EAVA,CAAA,GAAA,CAUAA,EACO1E,CAFQA;AAERA,qBAHkBf,CARzB;AAWOe,mBAOO,EAAA;;AAPPA,yBAAAA,CAAAA,IAAAA,CAAAA,CAAAA,IAAAA,GAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,iBAbX2E,CAAAA;AAaW3E,eAbX2E,EAaW3E,UAQFL,CAREK,EAQFL;AACPE,gBAAAA,CAAAA,CAAoBF,CAApBE,CAAAA;AAAoBF,eAtBtBgF,CAAAA,CAAAA;AALF,aAKEA,CALF,OAAA,CAAA,EAAA;AAAA,qBAAA,OAAA,CAAA,MAAA,CAAA,CAAA,CAAA;AAAA;AUSagG,WAAP,CAAyB;AACvBpF,YAAAA,KAAAA,EAAAA,CADuB;AAEvBD,YAAAA,QAAAA,EAAAA,CAFuB;AAGvBI,YAAAA,eAAAA,EAAAA,CAHuB;AAIvBF,YAAAA,QAAAA,EAAAA,CAJuB;AAKvBb,YAAAA,QAAAA,EAAAA;AALuB,WAAzB,CAAA,CAAA;;AAOF,aAAK,cAAL;AACE,iBAAA,OAAA,CAAA,OAAA,CAAO+B,CAAAA,CAAqB;AAAEnB,YAAAA,KAAAA,EAAAA;AAAF,WAArBmB,CAAP,CAAA;;AACF,aAAK,MAAL;AACE,iBAAA,OAAA,CAAA,OAAA,CAAA,YRzD0D;AAAA,gBQyD1D;ARzD8BtH,cAAAA,KAAAA,EAAEA,CQyDhC;ARzD8BA,cAAAA,IAAAA,EAAS2G,CQyDvC;ARzD8B3G,cAAAA,QAAAA,EAAeuF;AQyD7C,aRzD0D,uEAAA,EAAA;;AAAA,gBAAA;AAAA,qBAAA,OAAA,CAAA,OAAA,CAAA,CAAA,CAAA,YAAA;AAI5D,oBAFAvF,CAAAA,GAAQA,CAAAA,IAASiF,CAAAA,CAAa,OAAbA,CAAjBjF,EACA2G,CAAAA,GAAOA,CAAAA,IAAQ1B,CAAAA,CAAa,MAAbA,CADfjF,EAEKA,CAAAA,IAAU2G,CAAf,EAHE,OAAA,OAAA,CAAA,OAAA,CAKqB7E,CAAAA,CAAI,YAAJA,EAAkB;AACvC9B,kBAAAA,KAAAA,EAAAA,CADuC;AAEvC2G,kBAAAA,IAAAA,EAAAA,CAFuC;AAGvCxE,kBAAAA,QAAAA,EAAUxC,CAAAA,CAAMwC;AAHuB,iBAAlBL,CALrB,EAQgBK,IARhB,CAQgBA,kBAHVvB;AAAAA,sBAGUuB;AAHZvB,oBAAAA,IAAAA,EAAEA;AAGUuB,mBAHVvB;AAAAA,sBAAAA,CAAAA;;AAAAA,2BAAAA,CAAAA,CAAAA,CAAAA,EAAAA;AAAAA,wBAAAA,CAAAA,EAAAA,OAAAA,CAAAA;AAaR,wBAAIA,CAAAA,CAAK2F,cAAL3F,CAAoB,iBAApBA,CAAJ,EACE,OAAOA,CAAP;AAGF,0BAAA,IAAUF,KAAV,CAAgB,qBAAhB,CAAA;AAAgB;;AAAA,wBAAA,CAAA,GAAA,YAAA;AAAA,wBAXZE,CAAAA,CAAK2F,cAAL3F,CAAoB,QAApBA,CAWY,EAtBd,OAYAgD,CAAAA,CAAoBhD,CAAAA,CAAKf,MAAzB+D,CAAAA,EAAyB/D,OAAAA,CAAAA,OAAAA,CACnB8E,CAAAA,CAAS/D,CAAT+D,CADmB9E,EACVe,IADUf,CACVe,YAAAA;AAAAA,6BACf0E,CAAAA,CAAe;AAAEC,wBAAAA,QAAAA,EAAAA,CAAF;AAAY3E,wBAAAA,IAAAA,EAAAA;AAAZ,uBAAf0E,CAAAA,EAdA,CAAA,GAAA,CAcAA,EACO1E,CAFQA;AAERA,qBAHkBf,CAZzB;AAeOe,mBAOO,EAAA;;AAPPA,yBAAAA,CAAAA,IAAAA,CAAAA,CAAAA,IAAAA,GAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,iBAfP,CAAA;AAeOA,eAhBmD,EAgBnDA,UAQFL,CAREK,EAQFL;AACPE,gBAAAA,CAAAA,CAAoBF,CAApBE,CAAAA;AAAoBF,eAzBwC,CAAA,CAAA;AAAhE,aAAgE,CAAhE,OAAA,CAAA,EAAA;AAAA,qBAAA,OAAA,CAAA,MAAA,CAAA,CAAA,CAAA;AAAA;AQyDaiL,WAAP,CAAqB;AAAExL,YAAAA,KAAAA,EAAAA,CAAF;AAAS2G,YAAAA,IAAAA,EAAAA,CAAT;AAAepB,YAAAA,QAAAA,EAAAA;AAAf,WAArB,CAAA,CAAA;;AACF,aAAK,MAAL;AACE,iBAAA,OAAA,CAAA,OAAA,CAAA,YN1CF;AAAA,gBM0CE;ANpD8BsC,cAAAA,QAAAA,EAClCA,CMmDI;ANpD8BA,cAAAA,UAAAA,EAElCC,CMkDI;ANpD8BD,cAAAA,MAAAA,EAGlCE,CMiDI;ANpD8BF,cAAAA,QAAAA,EAIlCG,CMgDI;ANpD8BH,cAAAA,eAAAA,EAKlCvB,CM+CI;ANpD8BuB,cAAAA,KAAAA,EAMlC1B,CM8CI;ANpD8B0B,cAAAA,QAAAA,EAOlC3B,CM6CI;ANpD8B2B,cAAAA,WAAAA,EAQlCJ,CM4CI;ANpD8BI,cAAAA,QAAAA,EASlCtC;AM2CI,aN1CF,uEAAA,EAAA;;AAAA,gBAAA;AAAA,qBAAA,OAAA,CAAA,OAAA,CAAA,CAAA,CAAA,YAAA;AAEA,oBAAKsC,CAAAA,IAAaC,CAAlB,EADE,OAAA,OAAA,CAAA,OAAA,CAGqBlG,CAAAA,CAAM,YAANA,EAAmB;AACxCiG,kBAAAA,QAAAA,EAAAA,CADwC;AAExCC,kBAAAA,UAAAA,EAAAA,CAFwC;AAGxCC,kBAAAA,MAAAA,EAAAA,CAHwC;AAIxCC,kBAAAA,QAAAA,EAAAA,CAJwC;AAKxC1B,kBAAAA,eAAAA,EAAAA,CALwC;AAMxCH,kBAAAA,KAAAA,EAAAA,CANwC;AAOxCD,kBAAAA,QAAAA,EAAAA,CAPwC;AAQxCuB,kBAAAA,WAAAA,EAAAA,CARwC;AASxCtF,kBAAAA,QAAAA,EAAUxC,CAAAA,CAAMwC;AATwB,iBAAnBP,CAHrB,EAYgBO,IAZhB,CAYgBA,kBATVvB;AAAAA,sBASUuB;AATZvB,oBAAAA,IAAAA,EAAEA;AASUuB,mBATVvB;AAAAA,sBAAAA,CAAAA;;AAAAA,2BAAAA,CAAAA,CAAAA,CAAAA,EAAAA;AAAAA,wBAAAA,CAAAA,EAAAA,OAAAA,CAAAA;AAmBR,wBAAIA,CAAAA,CAAK2F,cAAL3F,CAAoB,iBAApBA,CAAJ,EACE,OAAOA,CAAP;AAGF,0BAAA,IAAUF,KAAV,CAAgB,qBAAhB,CAAA;AAAgB;;AAAA,wBAAA,CAAA,GAAA,YAAA;AAAA,wBAXZE,CAAAA,CAAK2F,cAAL3F,CAAoB,QAApBA,CAWY,EA1Bd,OAgBAgD,CAAAA,CAAoBhD,CAAAA,CAAKf,MAAzB+D,CAAAA,EAAyB/D,OAAAA,CAAAA,OAAAA,CACnB8E,CAAAA,CAAS/D,CAAT+D,CADmB9E,EACVe,IADUf,CACVe,YAAAA;AAAAA,6BACf0E,CAAAA,CAAe;AAAEC,wBAAAA,QAAAA,EAAAA,CAAF;AAAY3E,wBAAAA,IAAAA,EAAAA;AAAZ,uBAAf0E,CAAAA,EAlBA,CAAA,GAAA,CAkBAA,EACO1E,CAFQA;AAERA,qBAHkBf,CAhBzB;AAmBOe,mBAOO,EAAA;;AAPPA,yBAAAA,CAAAA,IAAAA,CAAAA,CAAAA,IAAAA,GAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,iBAnBP,CAAA;AAmBOA,eApBT,EAoBSA,UAQFL,CAREK,EAQFL;AACPE,gBAAAA,CAAAA,CAAoBF,CAApBE,CAAAA;AAAoBF,eA7BpB,CAAA,CAAA;AAVJ,aAUI,CAVJ,OAAA,CAAA,EAAA;AAAA,qBAAA,OAAA,CAAA,MAAA,CAAA,CAAA,CAAA;AAAA;AMoDakL,WAAP,CAAqB;AACnB5D,YAAAA,QAAAA,EAAAA,CADmB;AAEnBC,YAAAA,UAAAA,EAAAA,CAFmB;AAGnBC,YAAAA,MAAAA,EAAAA,CAHmB;AAInBC,YAAAA,QAAAA,EAAAA,CAJmB;AAKnB1B,YAAAA,eAAAA,EAAAA,CALmB;AAMnBH,YAAAA,KAAAA,EAAAA,CANmB;AAOnBD,YAAAA,QAAAA,EAAAA,CAPmB;AAQnBuB,YAAAA,WAAAA,EAAAA,CARmB;AASnBlC,YAAAA,QAAAA,EAAAA;AATmB,WAArB,CAAA,CAAA;;AAWF,aAAK,kBAAL;AACE,iBAAA,OAAA,CAAA,OAAA,CAAA,YPTF;AAAA,gBOSE;APf0CiC,cAAAA,OAAAA,EAC9CA,COcI;APf0CA,cAAAA,gBAAAA,EAE9CI,COaI;APf0CJ,cAAAA,KAAAA,EAG9CrB,COYI;APf0CqB,cAAAA,WAAAA,EAI9CC,COWI;APf0CD,cAAAA,QAAAA,EAK9CjC;AOUI,aPTF,uEAAA,EAAA;;AAAA,gBAAA;AAAA,qBAAA,OAAA,CAAA,OAAA,CAAA,CAAA,CAAA,YAAA;AACE,uBACFgC,CAAAA,CAAe;AACbC,kBAAAA,OAAAA,EAAAA,CADa;AAEbC,kBAAAA,WAAAA,EAAAA,CAFa;AAGbtB,kBAAAA,KAAAA,EAAAA;AAHa,iBAAfoB,CAAAA,EAGEpB,OAAAA,CAAAA,OAAAA,CAGqBrE,CAAAA,CAAK,YAALA,EAAkB;AACvC0F,kBAAAA,OAAAA,EAAAA,CADuC;AAEvCI,kBAAAA,gBAAAA,EAAAA,CAFuC;AAGvCzB,kBAAAA,KAAAA,EAAAA,CAHuC;AAIvCsB,kBAAAA,WAAAA,EAAAA,CAJuC;AAKvCtF,kBAAAA,QAAAA,EAAUxC,CAAAA,CAAMwC;AALuB,iBAAlBL,CAHrBqE,EAQgBhE,IARhBgE,CAQgBhE,kBALVvB;AAAAA,sBAKUuB;AALZvB,oBAAAA,IAAAA,EAAEA;AAKUuB,mBALVvB;AAAAA,sBAAAA,CAAAA;;AAAAA,2BAAAA,CAAAA,CAAAA,CAAAA,EAAAA;AAAAA,wBAAAA,CAAAA,EAAAA,OAAAA,CAAAA;AAeR,wBAAIA,CAAAA,CAAK2F,cAAL3F,CAAoB,iBAApBA,CAAJ,EACE,OAAOA,CAAP;AAGF,0BAAA,IAAUF,KAAV,CAAgB,qBAAhB,CAAA;AAAgB;;AAAA,wBAAA,CAAA,GAAA,YAAA;AAAA,wBAXZE,CAAAA,CAAK2F,cAAL3F,CAAoB,QAApBA,CAWY,EA1Bd,OAgBAgD,CAAAA,CAAoBhD,CAAAA,CAAKf,MAAzB+D,CAAAA,EAAyB/D,OAAAA,CAAAA,OAAAA,CACnB8E,CAAAA,CAAS/D,CAAT+D,CADmB9E,EACVe,IADUf,CACVe,YAAAA;AAAAA,6BACf0E,CAAAA,CAAe;AAAEC,wBAAAA,QAAAA,EAAAA,CAAF;AAAY3E,wBAAAA,IAAAA,EAAAA;AAAZ,uBAAf0E,CAAAA,EAlBA,CAAA,GAAA,CAkBAA,EACO1E,CAFQA;AAERA,qBAHkBf,CAhBzB;AAmBOe,mBAOO,EAAA;;AAPPA,yBAAAA,CAAAA,IAAAA,CAAAA,CAAAA,IAAAA,GAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,iBAfPuF,CAJA;AAmBOvF,eApBT,EAoBSA,UAQFL,CAREK,EAQFL;AACPE,gBAAAA,CAAAA,CAAoBF,CAApBE,CAAAA;AAAoBF,eA7BpB,CAAA,CAAA;AANJ,aAMI,CANJ,OAAA,CAAA,EAAA;AAAA,qBAAA,OAAA,CAAA,MAAA,CAAA,CAAA,CAAA;AAAA;AOeamL,WAAP,CAAiC;AAC/BlE,YAAAA,OAAAA,EAAAA,CAD+B;AAE/BrB,YAAAA,KAAAA,EAAAA,CAF+B;AAG/BsB,YAAAA,WAAAA,EAAAA,CAH+B;AAI/BG,YAAAA,gBAAAA,EAAAA,CAJ+B;AAK/BrC,YAAAA,QAAAA,EAAAA;AAL+B,WAAjC,CAAA,CAAA;;AAOF,aAAK,MAAL;AACE,iBAAA,OAAA,CAAA,OAAA,CAAA,YAAA;AAAA,gBAAA;AAAA,qBAAA,OAAA,CAAA,OAAA,CCqdC,UAAgBX,CAAhB,EAAsBC,CAAtB,EAAsBA;AAC5B,oBAAA;AACC,sBAAIC,CAAAA,GA9iBGnF,CAAAA,CAAME,MAANF,CAAauE,WAAbvE,GAAauE,OAAAA,CAAAA,OAAAA,CAIK5C,CAAAA,CAAK,sBAALA,EAA4B;AACjDmD,oBAAAA,OAAAA,EAAS;AACPC,sBAAAA,aAAAA,EAAgB,YAAS/E,CAAAA,CAAME,MAANF,CAAauE;AAD/B;AADwC,mBAA5B5C,CAJL4C,EAMwBA,IANxBA,CAMwBA,kBAFlCtD;AAAAA,wBAEkCsD;AAFpCtD,sBAAAA,IAAAA,EAAEA;AAEkCsD,qBAFlCtD;AAMRgC,oBAAAA,MAAAA,CAAOC,QAAPD,CAAgByE,MAAhBzE,CACG,GAAEjD,CAAAA,CAAM+B,OAAAA,iCAAwC/B,CAAAA,CAAMwC,QAAAA,UAAkBvB,CAAAA,CAAKZ,KAAAA,SAAcL,CAAAA,CAAMC,IAAND,CAAWqI,QAAAA,EADzGpF;AACyGoF,mBAXvF9D,CAAbvE,GACIa,OAAAA,CAAQO,IAARP,CAAa,iDAAbA,CA6iBX;AACC,iBAFF,CAEE,OAAMuE,CAAN,EAAMA;AACP,yBAAOF,CAAAA,CAAQE,CAARF,CAAP;AAED;;AAAA,uBAAIC,CAAAA,IAAUA,CAAAA,CAAOE,IAAjBF,GACIA,CAAAA,CAAOE,IAAPF,CAAOE,KAAK,CAAZF,EAAoBD,CAApBC,CADJA,GAGGA,CAHP;AAGOA,eATD,CASCA,CATD,EASCA,UAxiBGvE,CAwiBHuE,EAxiBGvE;AACPE,gBAAAA,CAAAA,CAAoBF,CAApBE,CAAAA;AAAoBF,eA8hBjB,CDrdD,CAAA;ACzFN,aDyFM,CCzFN,OAAA,CAAA,EAAA;AAAA,qBAAA,OAAA,CAAA,MAAA,CAAA,CAAA,CAAA;AAAA;ADyFaoL,WAAP,EAAA,CAAA;;AACF;AACE,gBAAA,IAAUjL,KAAV,CAAgB,wDAAhB,CAAA;AA3CJ;AA1BF,KAsBI,CAtBJ,OAAA,CAAA,EAAA;AAAA,aAAA,OAAA,CAAA,MAAA,CAAA,CAAA,CAAA;AAAA;AAAA,GDkFe;AAyBboG,EAAAA,aAAAA,EAAAA,CAzBa;AA0BbN,EAAAA,cAAAA,EAAAA,CA1Ba;AA2Bb0E,EAAAA,aAAAA,EAAAA,UPxFkC/E,COwFlC+E,EPxFkC/E;AAAAA,QAAAA;AAAAA,aAAAA,OAAAA,CAAAA,OAAAA,CAAAA,CAAAA,CAAAA,YAAAA;AAAAA,eAAAA,OAAAA,CAAAA,OAAAA,CAETvE,CAAAA,CAAM,YAANA,EAAmB;AACxCuE,UAAAA,KAAAA,EAAAA,CADwC;AAExChE,UAAAA,QAAAA,EAAUxC,CAAAA,CAAMwC;AAFwB,SAAnBP,CAFSuE,EAIdhE,IAJcgE,CAIdhE,kBAFVvB;AAAAA,cAEUuB;AAFZvB,YAAAA,IAAAA,EAAEA;AAEUuB,WAFVvB;AAIR,iBAAOA,CAAP;AAAOA,SANyBuF,CAAAA;AAMzBvF,OANyBuF,EAMzBvF,UACAL,CADAK,EACAL;AACPE,QAAAA,CAAAA,CAAoBF,CAApBE,CAAAA;AAAoBF,OARY4F,CAAAA,CAAAA;AAApC,KAAoCA,CAApC,OAAA,CAAA,EAAA;AAAA,aAAA,OAAA,CAAA,MAAA,CAAA,CAAA,CAAA;AAAA;AAAA,GO6De;AA4BbgF,EAAAA,aAAAA,EAAAA,UTjDkChF,CSiDlCgF,ETjDkChF;AAAAA,QAAAA;AAAAA,aAAAA,OAAAA,CAAAA,OAAAA,CAAAA,CAAAA,CAAAA,YAAAA;AAAAA,eAAAA,OAAAA,CAAAA,OAAAA,CAETvE,CAAAA,CAAM,kBAANA,EAAyB;AAC9CuE,UAAAA,KAAAA,EAAAA,CAD8C;AAE9ChE,UAAAA,QAAAA,EAAUxC,CAAAA,CAAMwC;AAF8B,SAAzBP,CAFSuE,EAIdhE,IAJcgE,CAIdhE,kBAFVvB;AAAAA,cAEUuB;AAFZvB,YAAAA,IAAAA,EAAEA;AAEUuB,WAFVvB;AAIR,iBAAOA,CAAP;AAAOA,SANyBuF,CAAAA;AAMzBvF,OANyBuF,EAMzBvF,UACAL,CADAK,EACAL;AACPE,QAAAA,CAAAA,CAAoBF,CAApBE,CAAAA;AAAoBF,OARY4F,CAAAA,CAAAA;AAApC,KAAoCA,CAApC,OAAA,CAAA,EAAA;AAAA,aAAA,OAAA,CAAA,MAAA,CAAA,CAAA,CAAA;AAAA;AAAA,GSqBe;AA6BbuB,EAAAA,oBAAAA,EAAAA,CA7Ba;AA8Bb0D,EAAAA,MAAAA,EAAAA,YG9GE;AAAA,QH8GFA;AGxH2B3E,MAAAA,MAAAA,EAC3BA,CHuHA2E;AGxH2B3E,MAAAA,KAAAA,EAE3BN,CHsHAiF;AGxH2B3E,MAAAA,QAAAA,EAG3BP,CHqHAkF;AGxH2B3E,MAAAA,WAAAA,EAI3BgB,CHoHA2D;AGxH2B3E,MAAAA,IAAAA,EAK3BhE,CHmHA2I;AGxH2B3E,MAAAA,IAAAA,EAM3B7F,CHkHAwK;AGxH2B3E,MAAAA,QAAAA,EAO3BL,CHiHAgF;AGxH2B3E,MAAAA,OAAAA,EAQ3Be,CHgHA4D;AGxH2B3E,MAAAA,QAAAA,EAS3BlB;AH+GA6F,KG9GE,uEAAA,EAAA;;AAAA,QAAA;AACF,UAAA,CAAK3E,CAAL,EACE,MAAA,IAAU/F,KAAV,CAAgB,oDAAhB,CAAA;;AAEF,cAAQ+F,CAAR;AACE,aAAK,OAAL;AACA,aAAK,OAAL;AACA,aAAK,UAAL;AACA,aAAK,QAAL;AACA,aAAK,QAAL;AACA,aAAK,UAAL;AACE,iBAAA,OAAA,CAAA,OAAA,CAAOU,CAAAA,CAAc;AAAEH,YAAAA,QAAAA,EAAUP,CAAZ;AAAoBlB,YAAAA,QAAAA,EAAAA;AAApB,WAAd4B,CAAP,CAAA;;AACF,aAAK,UAAL;AACE,iBAAA,OAAA,CAAA,OAAA,CAAA,YZjBF;AAAA,gBYiBE;AZxBmCjB,cAAAA,QAAAA,EACvCA,CYuBI;AZxBmCA,cAAAA,IAAAA,EAEvCzD,CYsBI;AZxBmCyD,cAAAA,KAAAA,EAGvCC,CYqBI;AZxBmCD,cAAAA,QAAAA,EAIvCE,CYoBI;AZxBmCF,cAAAA,QAAAA,EAKvCG,CYmBI;AZxBmCH,cAAAA,QAAAA,EAMvCX;AYkBI,aZjBF,uEAAA,EAAA;;AAAA,gBAAA;AAAA,qBAAA,OAAA,CAAA,OAAA,CAAA,CAAA,CAAA,YAAA;AAAA,uBAAA,OAAA,CAAA,OAAA,CAEuB3D,CAAAA,CAAM,cAANA,EAAqB;AAC1CO,kBAAAA,QAAAA,EAAUxC,CAAAA,CAAMwC,QAD0B;AAE1C+D,kBAAAA,QAAAA,EAAAA,CAF0C;AAG1CzD,kBAAAA,IAAAA,EAAAA,CAH0C;AAI1C0D,kBAAAA,KAAAA,EAAAA,CAJ0C;AAK1CC,kBAAAA,QAAAA,EAAAA,CAL0C;AAM1CxF,kBAAAA,IAAAA,EAAMyF;AANoC,iBAArBzE,CAFvB,EAQQyE,IARR,CAQQA,kBANAzF;AAAAA,sBAMAyF;AANFzF,oBAAAA,IAAAA,EAAEA;AAMAyF,mBANAzF;AAAAA,sBAQJA,CAAAA,CAAKf,MARDe,EADN,OAUAgD,CAAAA,CAAoBhD,CAAAA,CAAKf,MAAzB+D,CAAAA,EAAyB/D,OAAAA,CAAAA,OAAAA,CACnB8E,CAAAA,CAAS/D,CAAT+D,CADmB9E,EACVe,IADUf,CACVe,YAAAA;AAEf,2BADA0E,CAAAA,CAAe;AAAEC,sBAAAA,QAAAA,EAAAA,CAAF;AAAY3E,sBAAAA,IAAAA,EAAAA;AAAZ,qBAAf0E,CAAAA,EACO1E,CAAP;AAAOA,mBAHkBf,CAVzB;AAeA,wBAAA,IAAUa,KAAV,CAAgB,mBAAhB,CAAA;AAAgB,iBAhBlB,CAAA;AAgBkB,eAhBlB,EAgBkB,UAEXH,CAFW,EAEXA;AACPE,gBAAAA,CAAAA,CAAoBF,CAApBE,CAAAA;AAAoBF,eAnBpB,CAAA,CAAA;AAPJ,aAOI,CAPJ,OAAA,CAAA,EAAA;AAAA,qBAAA,OAAA,CAAA,MAAA,CAAA,CAAA,CAAA;AAAA;AYwBaqL,WAAP,CAA0B;AACxB1F,YAAAA,QAAAA,EAAAA,CADwB;AAExBzD,YAAAA,IAAAA,EAAAA,CAFwB;AAGxB0D,YAAAA,KAAAA,EAAAA,CAHwB;AAIxBC,YAAAA,QAAAA,EAAAA,CAJwB;AAKxBC,YAAAA,QAAAA,EAAUzF,CALc;AAMxB2E,YAAAA,QAAAA,EAAAA;AANwB,WAA1B,CAAA,CAAA;;AAQF,aAAK,cAAL;AACE,iBAAA,OAAA,CAAA,OAAA,CAAO+B,CAAAA,CAAqB;AAAEnB,YAAAA,KAAAA,EAAAA,CAAF;AAAS1D,YAAAA,IAAAA,EAAAA,CAAT;AAAeyD,YAAAA,QAAAA,EAAAA,CAAf;AAAyBG,YAAAA,QAAAA,EAAUzF;AAAnC,WAArB0G,CAAP,CAAA;;AACF,aAAK,kBAAL;AACE,iBAAA,OAAA,CAAA,OAAA,CAAOI,CAAAA,CAAqB;AAC1BF,YAAAA,OAAAA,EAAAA,CAD0B;AAE1BrB,YAAAA,KAAAA,EAAAA,CAF0B;AAG1BsB,YAAAA,WAAAA,EAAAA,CAH0B;AAI1BhF,YAAAA,IAAAA,EAAAA,CAJ0B;AAK1ByD,YAAAA,QAAAA,EAAAA,CAL0B;AAM1BtF,YAAAA,IAAAA,EAAAA;AAN0B,WAArB8G,CAAP,CAAA;;AAQF;AACE,gBAAA,IAAUhH,KAAV,CACE,yDADF,CAAA;AA7BJ;AAdF,KAUI,CAVJ,OAAA,CAAA,EAAA;AAAA,aAAA,OAAA,CAAA,MAAA,CAAA,CAAA,CAAA;AAAA;AAAA,GH0Fe;AAiCbf,EAAAA,KAAAA,EAAAA,CAjCa;AAoCbE,EAAAA,MAAAA,EAAAA,CApCa;AAqCbqE,EAAAA,WAAAA,EAAAA,YAAAA;AZ7HA,WADAvE,CAAAA,CAAME,MAANF,CAAauE,WAAbvE,GAA2B2C,CAAAA,CAAQhB,GAARgB,CAAY3C,CAAAA,CAAME,MAANF,CAAa8D,eAAzBnB,CAA3B3C,EACOA,CAAAA,CAAME,MAANF,CAAauE,WAApB;AAAoBA,GYwFP;AAsCbpD,EAAAA,OAAAA,EAAAA,YAAAA;AZtHA,WADAnB,CAAAA,CAAME,MAANF,CAAamB,OAAbnB,GAAuB2C,CAAAA,CAAQhB,GAARgB,CAAY3C,CAAAA,CAAME,MAANF,CAAa+D,WAAzBpB,CAAvB3C,EACOA,CAAAA,CAAME,MAANF,CAAamB,OAApB;AAAoBA,GYgFP;AAyCbuK,EAAAA,kBAAAA,EAAAA,YV9GsD;AAAA,QU8GtDA;AV9GuC9F,MAAAA,QAAAA,EAAEA;AU8GzC8F,KV9GsD,uEAAA,EAAA;;AAAA,QAAA;AACtD,UAAA,CAAK1L,CAAAA,CAAME,MAANF,CAAauE,WAAlB,EACE,OAAA,OAAA,CAAA,OAAA,CAAOV,CAAAA,EAAP,CAAA;AAIF,UAAI+B,CAAJ,EACE,OAAA,OAAA,CAAA,OAAA,CAAOE,CAAAA,CAAeF,CAAfE,CAAP,CAAA;AAAsBF,UACbN,CAAAA,CAAa,UAAbA,CADaM,EAEtB,OAAA,OAAA,CAAA,OAAA,CAAOE,CAAAA,CAAeR,CAAAA,CAAa,UAAbA,CAAfQ,CAAP,CAAA;;AATwD,YAAA,CAAA,GAAA,UA2gBrCb,CA3gBqC,EA2gB/BC,CA3gB+B,EA2gB/BA;AAC5B,YAAA;AACC,cAAIC,CAAAA,GAAAA,OAAAA,CAAAA,OAAAA,CA/fqBxD,CAAAA,CAAK,OAALA,EAAa;AAClCmD,YAAAA,OAAAA,EAAS;AACPC,cAAAA,aAAAA,EAAgB,YAAS/E,CAAAA,CAAME,MAANF,CAAauE;AAD/B;AADyB,WAAb5C,CA+frBwD,EA7fwCZ,IA6fxCY,CA7fwCZ,kBAFlCtD;AAAAA,gBAEkCsD;AAFpCtD,cAAAA,IAAAA,EAAEA;AAEkCsD,aAFlCtD;AAKJA,YAAAA,CAAAA,CAAK8E,MAAL9E,IAAeA,CAAAA,CAAK8E,MAAL9E,CAAY+E,iBAA3B/E,IACF6E,CAAAA,CAAe7E,CAAAA,CAAK8E,MAAL9E,CAAY+E,iBAA3BF,CADE7E;AACyB+E,WAyf3Bb,CAAJ;AACC,SAFF,CAEE,OAAMC,CAAN,EAAMA;AACP,iBAAOF,CAAAA,EAAP;AAED;;AAAA,eAAIC,CAAAA,IAAUA,CAAAA,CAAOE,IAAjBF,GACIA,CAAAA,CAAOE,IAAPF,CAAOE,KAAK,CAAZF,EAAoBD,CAApBC,CADJA,GAGGA,CAHP;AAGOA,OAphBoD,CAohBpDA,CAphBoD,EAohBpDA,YAAAA;AA7fJtB,QAAAA,CAAAA;AAAAA,OAvBwD,CAAA;;AAuBxDA,aAAAA,OAAAA,CAAAA,OAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,IAAAA,GAAAA,CAAAA,CAAAA,IAAAA,CAAAA,YAAAA,CAAAA,CAAAA,CAAAA,GAAAA,KAAAA,CAAAA,CAAAA;AAvBJ,KAAwD,CAAxD,OAAA,CAAA,EAAA;AAAA,aAAA,OAAA,CAAA,MAAA,CAAA,CAAA,CAAA;AAAA;AAAA,GUqEe;AA4Cb5D,EAAAA,IAAAA,EAAAA,CA5Ca;AA+Cb0L,EAAAA,OAAAA,EAAAA,YI7IqE;AAAA,QJ6IrEA;AI7I4BrJ,MAAAA,IAAAA,EAAEA,CJ6I9BqJ;AI7I4BrJ,MAAAA,WAAAA,EAAQwF,CJ6IpC6D;AI7I4BrJ,MAAAA,eAAAA,EAAqB4J;AJ6IjDP,KI7IqE,uEAAA,EAAA;;AAAA,QAAA;AACrE,UAAA,CAAKrJ,CAAL,EACE,MAAA,IAAUvB,KAAV,CAAgB,mDAAhB,CAAA;;AAGF,cAAQuB,CAAR;AACE,aAAK,kBAAL;AACE,cAAA,CAAKwF,CAAL,IAAKA,CAAgBoE,CAArB,EACE,MAAA,IAAUnL,KAAV,CACE,yFADF,CAAA;AAKF,iBAAA,YAwBF;AAAA,gBAxBE;AAmB4BmL,cAAAA,eAAAA,EAChCA,CApBI;AAmB4BA,cAAAA,QAAAA,EAEhCE,CArBI;AAmB4BF,cAAAA,OAAAA,EAGhCrE,CAtBI;AAmB4BqE,cAAAA,WAAAA,EAIhCpE;AAvBI,aAwBF,uEAAA,EAAA;;AAAA,gBAAA;AACF,kBAAA,EAAKoE,CAAAA,IAAoBE,CAApBF,IAAiCrE,CAAjCqE,IAA6CpE,CAAlD,CAAA,EACE,MAAA,IAAU/G,KAAV,CAAgB,2CAAhB,CAAA;AAFI,qBAAA,OAAA,CAAA,OAAA,CA+fD,UAAgBkE,CAAhB,EAAsBC,CAAtB,EAAsBA;AAC5B,oBAAA;AACC,sBAAIC,CAAAA,GAAAA,OAAAA,CAAAA,OAAAA,CA3fqBlD,CAAAA,CAAM,WAANA,EAAkB;AACvCO,oBAAAA,QAAAA,EAAUxC,CAAAA,CAAMwC,QADuB;AAEvC0J,oBAAAA,eAAAA,EAAAA,CAFuC;AAGvCE,oBAAAA,QAAAA,EAAAA,CAHuC;AAIvCvE,oBAAAA,OAAAA,EAAAA,CAJuC;AAKvCC,oBAAAA,WAAAA,EAAAA;AALuC,mBAAlB7F,CA2frBkD,EAtfA2C,IAsfA3C,CAtfA2C,kBALM7G;AAAAA,wBAKN6G;AALI7G,sBAAAA,IAAAA,EAAEA;AAKN6G,qBALM7G;AAQR,2BAAOA,CAAP;AAAOA,mBAmfLkE,CAAJ;AACC,iBAFF,CAEE,OAAMC,CAAN,EAAMA;AACP,yBAAOF,CAAAA,CAAQE,CAARF,CAAP;AAED;;AAAA,uBAAIC,CAAAA,IAAUA,CAAAA,CAAOE,IAAjBF,GACIA,CAAAA,CAAOE,IAAPF,CAAOE,KAAK,CAAZF,EAAoBD,CAApBC,CADJA,GAGGA,CAHP;AAGOA,eATD,CASCA,CATD,EASCA,UAzfGvE,CAyfHuE,EAzfGvE;AACPE,gBAAAA,CAAAA,CAAoBF,CAApBE,CAAAA;AAAoBF,eA+ejB,CA/fC,CAAA;AALR,aAKI,CALJ,OAAA,CAAA,EAAA;AAAA,qBAAA,OAAA,CAAA,MAAA,CAAA,CAAA,CAAA;AAAA;AAnBauL,WAAP,CAAmB;AACjBD,YAAAA,eAAAA,EAAAA,CADiB;AAEjBpE,YAAAA,WAAAA,EAAAA,CAFiB;AAGjBsE,YAAAA,QAAAA,EAAU,kBAHO;AAIjBvE,YAAAA,OAAAA,EAAS;AAJQ,WAAnB,CAAA;;AAMF;AACE,gBAAA,IAAU9G,KAAV,CAAgB,wDAAhB,CAAA;AAfJ;AALF,KAAuE,CAAvE,OAAA,CAAA,EAAA;AAAA,aAAA,OAAA,CAAA,MAAA,CAAA,CAAA,CAAA;AAAA;AAAA;AJ8Fe,CAAf;AI9FA,eAAA,CAAA","sourcesContent":["export const store = {\n  user: {},\n  tokens: {},\n  mode: \"live\",\n};\n","/**\n * This file is for zero-dependency utilities that can\n * be imported by any other file. Don't add any imports\n * to this file other than constants\n */\n\n/**\n * Get the unverified base64 decoded payload of a JWT\n *\n * @param {String} token - JSON Web Token\n * @returns {Object}\n */\nexport function getJWTPayload(token) {\n  try {\n    const encodedPayload = token\n      .split(\".\")[1]\n      .replace(\"-\", \"+\")\n      .replace(\"_\", \"/\");\n    return JSON.parse(atob(encodedPayload));\n  } catch (error) {\n    console.error(\"Problem decoding JWT payload\", error);\n  }\n}\n\nexport function throwFormattedError(error) {\n  if (!error) return;\n  if (typeof error === \"string\") throw new Error(error);\n  if (error?.response?.data?.message) {\n    throw new Error(error.response.data.message);\n  }\n  throw error;\n}\n","import { store } from \"./store.js\";\nimport { getJWTPayload } from \"./utils.js\";\n\n/**\n * Define the store.user object based on the ID token\n */\nexport function setUser() {\n  if (!store.tokens.idToken) {\n    return console.warn(\"Cannot define user: missing ID token\");\n  }\n\n  store.user = store.user || {};\n  const idTokenPayload = getJWTPayload(store.tokens.idToken);\n\n  // Set basic user information properties from ID token\n  const propsToDefine = [\n    \"email\",\n    \"phoneNumber\",\n    \"username\",\n    \"name\",\n    \"image\",\n    \"data\",\n    \"confirmedAt\",\n    \"createdAt\",\n    \"updatedAt\",\n    \"mode\",\n    \"userId\",\n    \"userUuid\",\n    \"tenantId\",\n    \"isConfirmed\",\n  ];\n  for (const prop of propsToDefine) {\n    if (prop === \"update\") return;\n    store.user[prop] = idTokenPayload[prop];\n  }\n}\n\n/**\n * Remove all user information\n */\nexport function unsetUser() {\n  for (const attr in store.user) {\n    if (typeof store.user[attr] !== \"function\") {\n      delete store.user[attr];\n    }\n  }\n}\n\n/**\n * Export the store.user object with the update method added\n */\nexport const user = store.user;\n","import axios from \"axios\";\nimport { store } from \"./store.js\";\n\n// Replace multiple slashes // with single slash / (except in the protocol)\nfunction reduceSlashes(str) {\n  return str.replace(/([^:]\\/)\\/+/g, \"$1\");\n}\n\n/**\n * Perform a GET request\n * @param {String} path\n * @param {Object} options\n * @returns {Object} response body\n */\nexport async function get(path, options) {\n  const url = reduceSlashes(`${store.baseUrl}${path}`);\n  return axios.get(url, options);\n}\n\n/**\n * Perform a POST request\n * @param {String} path\n * @param {Object} payload\n * @param {Object} options\n * @returns {Object} response body\n */\nexport async function post(path, payload, options) {\n  const url = reduceSlashes(`${store.baseUrl}${path}`);\n  return axios.post(url, payload, options);\n}\n\n/**\n * Perform a PUT request\n * @param {String} path\n * @param {Object} payload\n * @param {Object} options\n * @returns {Object} response body\n */\nexport async function put(path, payload, options) {\n  const url = reduceSlashes(`${store.baseUrl}${path}`);\n  return axios.put(url, payload, options);\n}\n\nexport default {\n  get,\n  post,\n  put,\n};\n","import Cookies from \"js-cookie\";\nimport { store } from \"./store.js\";\nimport { setTokensFromCookies, unsetTokens } from \"./tokens.js\";\n\n/**\n * Set a cookie value based on the given options.\n * @param {String} value\n * @param {Object} options\n * @param {String} type\n */\nexport function setCookie(value, options, type) {\n  const cookieName = `${type}.${store.tenantId}`;\n  options = options || {\n    secure: store.mode === \"live\",\n    sameSite: \"Lax\",\n  };\n  if (type === \"refresh\") {\n    options.sameSite = \"Strict\";\n  }\n  Cookies.set(cookieName, value, options);\n}\n\n/**\n * Remove a cookie by name, regardless of its cookie setting(s).\n * @param {String} name\n */\nfunction removeCookie(name) {\n  // Define all possible path and domain combinations\n  let paths, domains;\n  try {\n    const path = window.location.pathname;\n    const hostname = window.location.hostname;\n    const hostnameParts = hostname.split(\".\");\n    const primaryDomain = hostnameParts.slice(-2).join(\".\");\n    paths = [undefined, path, \"/\"];\n    domains = [\n      undefined,\n      hostname,\n      `.${hostname}`,\n      primaryDomain,\n      `.${primaryDomain}`,\n    ];\n  } catch (err) {\n    paths = [undefined, \"/\"];\n    domains = [undefined];\n  }\n\n  // Iterate over paths and domains, and remove cookies if present\n  paths.map((path) => {\n    domains.map((domain) => {\n      const options = {};\n      if (domain) options.domain = domain;\n      if (path) options.path = path;\n      Cookies.remove(name, options);\n    });\n  });\n}\n\n/**\n * Remove all auth cookies (access, id, refresh).\n */\nexport function removeAllCookies() {\n  removeCookie(store.tokens.accessTokenName);\n  removeCookie(store.tokens.idTokenName);\n  removeCookie(store.tokens.refreshTokenName);\n  unsetTokens();\n}\n\n/**\n * Set the cookies from a tokens object, and add to the local store.\n * @param {Object} tokens\n */\nexport function setCookiesAndTokens(tokens) {\n  setCookie(tokens.access.value, tokens.access.cookieOptions, \"access\");\n  setCookie(tokens.id.value, tokens.id.cookieOptions, \"id\");\n  if (tokens.refresh && tokens.refresh.value) {\n    setCookie(tokens.refresh.value, tokens.refresh.cookieOptions, \"refresh\");\n  }\n  setTokensFromCookies();\n}\n","import Cookies from \"js-cookie\";\nimport { store } from \"./store.js\";\nimport { setUser, unsetUser } from \"./user.js\";\nimport { refresh } from \"./refresh.js\";\n\nstore.tokens = store.tokens || {};\nstore.tokens.refresh = refresh;\n\nexport function setTokenNames() {\n  store.tokens = store.tokens || {};\n  store.tokens.accessTokenName = `access.${store.tenantId}`;\n  store.tokens.idTokenName = `id.${store.tenantId}`;\n  store.tokens.refreshTokenName = `refresh.${store.tenantId}`;\n}\n\n/**\n * Set and then return the access token\n */\nexport function accessToken() {\n  store.tokens.accessToken = Cookies.get(store.tokens.accessTokenName);\n  return store.tokens.accessToken;\n}\n\n/**\n * Set and then return the ID token\n */\nexport function idToken() {\n  store.tokens.idToken = Cookies.get(store.tokens.idTokenName);\n  return store.tokens.idToken;\n}\n\n/**\n * Define the store token values from the cookie values.\n */\nexport function setTokensFromCookies() {\n  const tokenNames = [\"access\", \"id\", \"refresh\"];\n  tokenNames.map((tokenName) => {\n    try {\n      const token = Cookies.get(store.tokens[`${tokenName}TokenName`]);\n      store.tokens[`${tokenName}Token`] = token;\n\n      // Set the user object whenever the ID token is set\n      if (tokenName === \"id\" && token) {\n        setUser();\n      }\n    } catch (error) {\n      console.warn(`Problem setting ${tokenName} token.`);\n    }\n  });\n}\n\n/**\n * Set the store token values to undefined\n */\nexport function unsetTokens() {\n  store.tokens.accessToken = undefined;\n  store.tokens.idToken = undefined;\n  store.tokens.refreshToken = undefined;\n  unsetUser();\n}\n\n/**\n * Export the store.tokens object\n */\nexport const tokens = store.tokens;\n\n// NOTE Commenting this out 6/11/21 because the packages it relies on (jsonwebtoken & jwks-rsa)\n// both cause a lot of bloat. If we want to verify tokens, this is a nice way to do it, but\n// we need to find libraries designed for the browser instead of node.\n/**\n * Verify the provided token\n * @param {String} token\n * @returns {Promise<void>} The provided token has been verified if `verifyToken` resolves without error\n */\n// export async function verifyToken(token) {\n//   if (!token) throw new Error(\"Missing token\");\n\n//   let publicKey;\n//   try {\n//     const decodedToken = jwt.decode(token, { complete: true });\n//     if (!decodedToken.header || !decodedToken.header.kid) {\n//       throw new Error(\"Token kid not defined\");\n//     }\n\n//     const client = new JwksClient({\n//       jwksUri: `${apiUrl}tenants/${store.tenantId}/jwks/${store.mode}`,\n//       requestHeaders: { origin: window.location.origin },\n//     });\n\n//     const key = await client.getSigningKey(decodedToken.header.kid);\n//     publicKey = key.getPublicKey();\n//   } catch (error) {\n//     throw error;\n//   }\n\n//   if (!publicKey) {\n//     throw new Error(\"Public key not found\");\n//   }\n\n//   try {\n//     jwt.verify(token, publicKey);\n//   } catch (error) {\n//     throw new Error(\"Token verification failed\");\n//   }\n\n//   return Promise.resolve();\n// }\n","import Cookies from \"js-cookie\";\nimport { get } from \"./api.js\";\nimport { setCookiesAndTokens } from \"./cookies.js\";\nimport { store } from \"./store.js\";\n// import { getIframe, postMessageAsPromise } from \"./iframe.js\";\nimport { throwFormattedError } from \"./utils.js\";\n\n/**\n * Refresh the access and ID tokens\n * - When in test mode, uses the basic refresh method\n * - For tenants without a custom SSL certificate, uses the basic refresh method\n * - For tenants with a custom SSL certificate and in live mode, uses the httpOnly refresh method\n * @returns {Promise}\n */\nexport async function refresh() {\n  try {\n    await basicRefresh();\n  } catch (error) {\n    console.warn(`Refresh failed: ${error.message}`);\n  }\n}\n\n/**\n * Use a regular (non-httpOnly) cookie to refresh the access and ID tokens.\n *\n * The basic refresh method is used automatically in test mode and in live\n * mode whenever an SSL certificate has not been set up.\n */\nasync function basicRefresh() {\n  const refreshToken = Cookies.get(store.tokens.refreshTokenName);\n  try {\n    const { data, status } = await get(`/auth/refresh`, {\n      headers: {\n        authorization: `Bearer ${refreshToken}`,\n      },\n    });\n    if (status !== 200) {\n      throw new Error(data.message || \"Problem with request\");\n    }\n    if (data.tokens) {\n      setCookiesAndTokens(data.tokens);\n      return data;\n    } else {\n      throw new Error(\"Problem setting cookies\");\n    }\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n\n// TODO re-enable httpOnly refresh method once new endpoints are stable [06/15/21]\n/**\n *\n * The httpOnly refresh method is only available for tenants with configured\n * SSL certificates while in live mode.\n */\n// async function httpOnlyRefresh() {\n//   const iframe = getIframe();\n//   if (!iframe) return;\n//   return postMessageAsPromise({\n//     type: \"refresh\",\n//     tenantId: store.tenantId,\n//   });\n// }\n\n/**\n * Use a sessionId and nonce to set the iframe refresh token\n * @param {String} sessionId\n * @param {String} nonce\n * @returns {Promise}\n */\nexport async function exchange({ sessionId, nonce }) {\n  return;\n\n  // TODO re-enable httpOnly exchange method once new endpoints are stable [06/15/21]\n  // --------------------------\n  // const iframe = getIframe();\n  // if (!iframe) return;\n  // return postMessageAsPromise({\n  //   type: \"exchange\",\n  //   tenantId: store.tenantId,\n  //   payload: {\n  //     sessionId,\n  //     nonce,\n  //   },\n  // });\n}\n","import { get } from \"./api.js\";\nimport { store } from \"./store.js\";\nimport { removeAllCookies } from \"./cookies.js\";\n\n/**\n * Get the value of a query attribute, e.g. ?attr=value\n * @param {String} attrName\n */\nexport function getQueryAttr(attrName) {\n  if (\n    typeof window !== \"object\" ||\n    typeof window.location !== \"object\" ||\n    !window.location.href ||\n    window.location.href.indexOf(`${attrName}=`) < 0\n  ) {\n    return;\n  }\n  return decodeURIComponent(\n    window.location.href.split(`${attrName}=`)[1].split(\"&\")[0]\n  );\n}\n\n/**\n * Redirect the browser based on explicit redirect input path, or the API response\n * @property {String|Boolean} redirect A path to redirect to, or false to not redirect\n * @property {Object} data The response object from the API\n * @returns\n */\nexport const handleRedirect = ({ redirect, data }) => {\n  if (redirect === false) return;\n  const path = redirect || getQueryAttr(\"redirect\") || data.redirectTo || \"/\";\n  redirectToPath(path);\n};\n\n// TODO replace with direct check of the access token.\n/**\n * If the access token is valid, redirect the browser to the\n * tenant's login redirection path (path after login).\n */\nexport async function redirectIfLoggedIn({ redirect } = {}) {\n  if (!store.tokens.accessToken) {\n    return removeAllCookies();\n  }\n\n  // Redirect to a provided path (check options first, then url querystring)\n  if (redirect) {\n    return redirectToPath(redirect);\n  } else if (getQueryAttr(\"redirect\")) {\n    return redirectToPath(getQueryAttr(\"redirect\"));\n  }\n\n  // If no path was provided, look up the path and then redirect there\n  try {\n    const { data } = await get(`/self`, {\n      headers: {\n        authorization: `Bearer ${store.tokens.accessToken}`,\n      },\n    });\n    if (data.tenant && data.tenant.loginRedirectPath) {\n      redirectToPath(data.tenant.loginRedirectPath);\n    }\n  } catch (err) {\n    removeAllCookies();\n  }\n}\n\n/**\n * Redirect to path portion of a URL.\n */\nexport function redirectToPath(pathOrUrl) {\n  // Return if no pathOrUrl, or if SSR or mobile\n  if (\n    !pathOrUrl ||\n    typeof document !== \"object\" ||\n    typeof window !== \"object\"\n  ) {\n    return;\n  }\n  try {\n    document && window;\n  } catch (error) {\n    return;\n  }\n\n  // Perform hard redirect\n  const el = document.createElement(\"a\");\n  el.href = pathOrUrl;\n  let path = `${el.pathname}${el.hash}${el.search}`;\n  if (el.pathname !== window.location.pathname) {\n    window.location.assign(path);\n  }\n}\n","import { post, put } from \"./api.js\";\nimport { setCookiesAndTokens } from \"./cookies.js\";\nimport { store } from \"./store.js\";\nimport { getQueryAttr, handleRedirect } from \"./url.js\";\nimport { throwFormattedError } from \"./utils.js\";\nimport { exchange } from \"./refresh.js\";\n\n/**\n * Register a new user with username, name, email, and password.\n * Redirect the browser after successful signup based on the redirectTo value returned.\n * @param {String} username\n * @param {String} name\n * @param {String} email\n * @param {String} password\n * @param {Object} userData - alias for the user.data object, since \"data\" is used in the response\n * @param {String} redirect - do not redirect if false, or redirect to a specific path\n */\nexport async function signupWithPassword({\n  username,\n  name,\n  email,\n  password,\n  userData,\n  redirect,\n} = {}) {\n  try {\n    const { data } = await post(`/auth/create`, {\n      tenantId: store.tenantId,\n      username,\n      name,\n      email,\n      password,\n      data: userData,\n    });\n    if (data.tokens) {\n      setCookiesAndTokens(data.tokens);\n      await exchange(data);\n      handleRedirect({ redirect, data });\n      return data;\n    } else {\n      throw new Error(\"Please try again.\");\n    }\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n\n/**\n * Log a user in with email/username and password.\n * Redirect the browser after successful login based on the redirectTo value returned.\n * @param {Object} options\n */\nexport async function loginWithPassword({\n  email,\n  username,\n  emailOrUsername,\n  password,\n  redirect,\n}) {\n  try {\n    const { data } = await post(`/auth/basic`, {\n      tenantId: store.tenantId,\n      emailOrUsername: email || username || emailOrUsername,\n      password,\n    });\n\n    if (data.hasOwnProperty(\"tokens\")) {\n      setCookiesAndTokens(data.tokens);\n      await exchange(data);\n      handleRedirect({ redirect, data });\n      return data;\n    }\n\n    if (data.hasOwnProperty(\"firstFactorCode\")) {\n      return data;\n    }\n\n    throw new Error(\"Please try again.\");\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n\n/**\n * Send a password reset link to the provided email.\n * @param {String} email\n */\nexport async function sendResetLink(email) {\n  try {\n    const { data } = await post(`/auth/reset/link`, {\n      email,\n      tenantId: store.tenantId,\n    });\n    return data;\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n\n/**\n * Set a user's password with their link credentials or JWT access token.\n *\n * If no method is provided, the order is:\n * - Check for link credentials; then\n * - Check for a JWT access token first\n *\n * @property {String} method (optional) \"link\" or \"jwt\"\n * @property {String} password\n * @property {String} existingPassword\n * @property {String} uuid\n * @property {String} token\n * @property {String} redirect\n * @returns\n */\nexport async function updatePassword({\n  method,\n  password,\n  existingPassword,\n  uuid,\n  token,\n  redirect,\n}) {\n  switch (method) {\n    // Allow for explicit setting of method\n    case \"link\":\n      return updatePasswordWithLink({ uuid, token, password, redirect });\n    case \"jwt\":\n      return updatePasswordWithJwt({ password, existingPassword });\n    default:\n      // Default (no method provided) is to look for link credentials first, then JWT access token\n      token = token || getQueryAttr(\"token\");\n      uuid = uuid || getQueryAttr(\"uuid\");\n      if (uuid && token) {\n        return updatePasswordWithLink({ uuid, token, password, redirect });\n      } else if (store.tokens.accessToken) {\n        return updatePasswordWithJwt({ password, existingPassword });\n      } else {\n        throw new Error(\n          \"updatePassword() was called without link credentials (token & uuid) or a JWT access token.\"\n        );\n      }\n  }\n}\n\nexport const resetPassword = updatePassword;\n\nexport async function updatePasswordWithLink({\n  uuid,\n  token,\n  password,\n  redirect,\n}) {\n  try {\n    token = token || getQueryAttr(\"token\");\n    uuid = uuid || getQueryAttr(\"uuid\");\n    if (!token || !uuid) throw new Error(\"Missing token or uuid\");\n    const { data } = await put(`/auth/reset`, {\n      tenantId: store.tenantId,\n      uuid,\n      token,\n      password,\n    });\n    if (data.tokens) {\n      setCookiesAndTokens(data.tokens);\n      handleRedirect({ redirect, data });\n      return data;\n    } else {\n      throw new Error(\n        \"There was a problem resetting your password. Please try again.\"\n      );\n    }\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n\nexport async function updatePasswordWithJwt({ password, existingPassword }) {\n  try {\n    if (!store.tokens.accessToken) {\n      throw new Error(\n        `updatePassword({ method: \"jwt\" }) was called without a JWT access token.`\n      );\n    }\n\n    const { data } = await put(\n      `/auth/basic`,\n      {\n        tenantId: store.tenantId,\n        password,\n        existingPassword,\n      },\n      {\n        headers: {\n          Authorization: `Bearer ${store.tokens.accessToken}`,\n        },\n      }\n    );\n\n    return data;\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n","import { store } from \"./store.js\";\nimport { getQueryAttr } from \"./url.js\";\n\nexport function getProviderLink({ provider, redirect }) {\n  if (!provider) throw new Error(\"Missing provider\");\n  if (!store.tenantId) throw new Error(\"Missing tenantId\");\n\n  let url = `${store.baseUrl}auth/${provider}/login?tenant_id=${store.tenantId}&origin=${window.location.origin}`;\n\n  let redirectTo = redirect || getQueryAttr(\"redirect\");\n  if (redirect === false) {\n    redirectTo = typeof document === \"object\" && document.location.pathname;\n  }\n  if (redirectTo) {\n    url += `&redirect=${encodeURIComponent(redirectTo)}`;\n  }\n\n  return url;\n}\n\n/**\n * Log in or register a user via SSO provider.\n * Redirect the browser after successful authentication and 302 redirect from server.\n * @param {String} provider Name of SSO provider\n * @param {String} redirect - do not redirect if false, or redirect to given path\n */\nexport function signonWithSso({ provider, redirect }) {\n  if (!provider) throw new Error(\"Missing provider\");\n  const url = getProviderLink({ provider, redirect });\n  window.location.assign(url);\n}\n","import { post, put } from \"./api.js\";\nimport { setCookiesAndTokens } from \"./cookies.js\";\nimport { store } from \"./store.js\";\nimport { getQueryAttr, handleRedirect } from \"./url.js\";\nimport { exchange } from \"./refresh.js\";\nimport { throwFormattedError } from \"./utils.js\";\n\n/**\n * Log a user in with a token/uuid combo passed into the function or\n * in the URL querystring. ?token=...&uuid=...\n * @param {String} token\n * @param {UUID} uuid\n * @param {String} redirect - do not redirect if false, or redirect to given path\n */\nexport async function loginWithLink({ token, uuid, redirect } = {}) {\n  try {\n    token = token || getQueryAttr(\"token\");\n    uuid = uuid || getQueryAttr(\"uuid\");\n    if (!token || !uuid) return;\n\n    const { data } = await put(\"/auth/link\", {\n      token,\n      uuid,\n      tenantId: store.tenantId,\n    });\n\n    if (data.hasOwnProperty(\"tokens\")) {\n      setCookiesAndTokens(data.tokens);\n      await exchange(data);\n      handleRedirect({ redirect, data });\n      return data;\n    }\n\n    if (data.hasOwnProperty(\"firstFactorCode\")) {\n      return data;\n    }\n\n    throw new Error(\"Problem logging in.\");\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n\n/**\n * Send a login link to the provided email.\n * @param {String} email\n */\nexport async function sendLoginLink(email) {\n  try {\n    const { data } = await post(`/auth/link`, {\n      email,\n      tenantId: store.tenantId,\n    });\n    return data;\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n\n/**\n * Create or update a user and send them a link to log in.\n * @param {Object} inputs\n */\nexport async function sendPasswordlessLink({\n  email,\n  name,\n  username,\n  userData,\n  options,\n}) {\n  try {\n    const { data } = await post(`/auth/link`, {\n      email,\n      name,\n      username,\n      data: userData,\n      options,\n      tenantId: store.tenantId,\n    });\n    return data;\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n","import { post, put } from \"./api.js\";\nimport { setCookiesAndTokens } from \"./cookies.js\";\nimport { store } from \"./store.js\";\nimport { handleRedirect } from \"./url.js\";\nimport { exchange } from \"./refresh.js\";\nimport { throwFormattedError } from \"./utils.js\";\n\n/**\n * Verify that proper identifier is available for the channel\n * @property {String} channel \"sms\" or \"email\"\n * @property {String} phoneNumber\n * @property {String} email\n */\nfunction enforceChannel({ channel, phoneNumber, email }) {\n  if (channel !== \"sms\" && channel !== \"email\") {\n    throw new Error(\"Invalid channel\");\n  }\n  if (channel === \"sms\" && !phoneNumber) {\n    throw new Error(`SMS verification code requires \"phoneNumber\"`);\n  } else if (channel === \"email\" && !email) {\n    throw new Error(`Email verification code requires \"email\"`);\n  }\n}\n\n/**\n * Send a verification code to the provided email address or phone number.\n * @property {String} channel \"sms\" (default) or \"email\"\n * @property {String} phoneNumber\n * @property {String} email\n * @property {String} name\n * @property {String} username\n * @property {Object} data\n */\nexport async function sendVerificationCode({\n  channel = \"sms\",\n  phoneNumber,\n  email,\n  name,\n  username,\n  data,\n}) {\n  try {\n    enforceChannel({\n      channel,\n      phoneNumber,\n      email,\n    });\n\n    const { data: res } = await post(`/auth/code`, {\n      channel,\n      email,\n      phoneNumber,\n      name,\n      username,\n      data,\n      tenantId: store.tenantId,\n    });\n    return res;\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n\n/**\n * Log a user in with a token/uuid combo passed into the function or\n * in the URL querystring. ?token=...&uuid=...\n * @param {String} token\n * @param {UUID} uuid\n * @param {String} redirect - do not redirect if false, or redirect to given path\n */\nexport async function loginWithVerificationCode({\n  channel,\n  verificationCode,\n  email,\n  phoneNumber,\n  redirect,\n} = {}) {\n  try {\n    enforceChannel({\n      channel,\n      phoneNumber,\n      email,\n    });\n\n    const { data } = await put(`/auth/code`, {\n      channel,\n      verificationCode,\n      email,\n      phoneNumber,\n      tenantId: store.tenantId,\n    });\n\n    if (data.hasOwnProperty(\"tokens\")) {\n      setCookiesAndTokens(data.tokens);\n      await exchange(data);\n      handleRedirect({ redirect, data });\n      return data;\n    }\n\n    if (data.hasOwnProperty(\"firstFactorCode\")) {\n      return data;\n    }\n\n    throw new Error(\"Problem logging in.\");\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n","import { get, post } from \"./api.js\";\nimport { setCookiesAndTokens } from \"./cookies.js\";\nimport { store } from \"./store.js\";\nimport { handleRedirect } from \"./url.js\";\nimport { exchange } from \"./refresh.js\";\nimport { throwFormattedError } from \"./utils.js\";\n\n/**\n * Log a user in with a TOTP authenticator code or a TOTP backup code,\n * plus an identifier for the user (e.g. userId, userUuid, or email)\n *\n * @property {String} totpCode \"123456\"\n * @property {String} backupCode \"aaaaa-bbbbb\"\n * @property {Integer} userId\n * @property {String} userUuid\n * @property {String} emailOrUsername\n * @property {String} email\n * @property {String} username\n * @property {String} phoneNumber\n * @property {String|Boolean} redirect - do not redirect if false, or redirect to given path\n */\nexport async function loginWithTotp({\n  totpCode,\n  backupCode,\n  userId,\n  userUuid,\n  emailOrUsername,\n  email,\n  username,\n  phoneNumber,\n  redirect,\n} = {}) {\n  try {\n    if (!totpCode && !backupCode) return;\n\n    const { data } = await post(`/auth/totp`, {\n      totpCode,\n      backupCode,\n      userId,\n      userUuid,\n      emailOrUsername,\n      email,\n      username,\n      phoneNumber,\n      tenantId: store.tenantId,\n    });\n\n    if (data.hasOwnProperty(\"tokens\")) {\n      setCookiesAndTokens(data.tokens);\n      await exchange(data);\n      handleRedirect({ redirect, data });\n      return data;\n    }\n\n    if (data.hasOwnProperty(\"firstFactorCode\")) {\n      return data;\n    }\n\n    throw new Error(\"Problem logging in.\");\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n\nexport async function getTotp() {\n  try {\n    if (!store.tokens.accessToken) {\n      throw new Error(`getTotp() was called without a JWT access token.`);\n    }\n\n    const { data } = await get(`/auth/totp`, {\n      headers: {\n        Authorization: `Bearer ${store.tokens.accessToken}`,\n      },\n    });\n\n    return data;\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n","import { get } from \"./api.js\";\nimport { getIframe, postMessageAsPromise } from \"./iframe.js\";\nimport { store } from \"./store.js\";\nimport { removeAllCookies } from \"./cookies.js\";\nimport { setTokensFromCookies } from \"./tokens.js\";\nimport { handleRedirect } from \"./url\";\nimport { throwFormattedError } from \"./utils.js\";\n\n/**\n * Log a user out and redirect to the logout path.\n */\nexport async function logout({ method, redirect } = {}) {\n  if (method === \"saml\") {\n    return completeSamlLogout();\n  }\n  if (!store.tokens.accessToken) {\n    return removeAllCookies();\n  }\n\n  try {\n    const { data } = await get(`/auth/logout`, {\n      headers: {\n        authorization: `Bearer ${store.tokens.accessToken}`,\n      },\n    });\n    removeAllCookies();\n    handleRedirect({ redirect, data });\n  } catch (err) {\n    removeAllCookies();\n  }\n}\n\nasync function completeSamlLogout() {\n  if (!store.tokens.accessToken) {\n    throw new Error(\"Please log in to authorize your logout request.\");\n  }\n\n  try {\n    const { data } = await get(`/auth/saml/idp/token`, {\n      headers: {\n        authorization: `Bearer ${store.tokens.accessToken}`,\n      },\n    });\n\n    window.location.assign(\n      `${store.baseUrl}auth/saml/idp/logout?tenant_id=${store.tenantId}&token=${data.token}&uuid=${store.user.userUuid}`\n    );\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n\n// TODO re-enable exchange method once new endpoints are stable [06/15/21]\n// --------------------------\n// const iframe = getIframe();\n// if (!iframe) return;\n// try {\n//   const { data } = await postMessageAsPromise({\n//     type: \"logout\",\n//     tenantId: store.tenantId,\n//   });\n//   removeAllCookies();\n//   setTokensFromCookies();\n//   handleRedirect({ redirect, data });\n// } catch (error) {\n//   removeAllCookies();\n//   redirectToPath(\"/\");\n// }\n","export const apiUrl = `https://api.userfront.com/v0/`;\n\nexport const privateIPRegex =\n  /((^127\\.)|(^10\\.)|(^172\\.1[6-9]\\.)|(^172\\.2[0-9]\\.)|(^172\\.3[0-1]\\.)|(^192\\.168\\.))\\d{1,3}\\.\\d{1,3}/g;\n","import { get } from \"./api.js\";\nimport { privateIPRegex } from \"./constants.js\";\nimport { store } from \"./store.js\";\n\n/**\n * Global mode object\n */\nexport const mode = {\n  value: \"live\",\n  reason: undefined,\n  setMode,\n};\n\nsetModeSync();\n\n/**\n * Determine whether a hostname is in test mode.\n * @param {String} hn\n */\nexport function isTestHostname(hn) {\n  try {\n    const hostname = hn || window.location.hostname;\n    return !!(hostname.match(/localhost/g) || hostname.match(privateIPRegex));\n  } catch (err) {\n    return true;\n  }\n}\n\nexport function isHttps() {\n  try {\n    return window.location.protocol === \"https:\";\n  } catch (error) {\n    return false;\n  }\n}\n\n/**\n * Define the mode of operation (live or test)\n */\nexport async function setMode() {\n  try {\n    const { data } = await get(`/tenants/${store.tenantId}/mode`);\n    mode.value = data.mode || \"test\";\n    mode.reason = getReason(mode.value);\n    store.mode = mode.value;\n  } catch (err) {\n    mode.value = \"test\";\n    store.mode = mode.value;\n  }\n}\n\n/**\n * Estimate the mode without making an API call\n */\nexport function setModeSync() {\n  const modeValue = isTestHostname() || !isHttps() ? \"test\" : \"live\";\n  mode.value = modeValue;\n  mode.reason = getReason(modeValue);\n  store.mode = modeValue;\n}\n\n/**\n * Set the reason for the mode\n * - http\n * - domain\n */\nfunction getReason(mode) {\n  try {\n    if (mode === \"live\") {\n      return \"domain\";\n    }\n    if (window.location.protocol === \"http:\") {\n      return \"http\";\n    } else if (window.location.protocol !== \"https:\") {\n      return \"protocol\";\n    } else {\n      return \"domain\";\n    }\n  } catch (error) {}\n}\n","/**\n * user methods are refactored into a separate file to avoid a circular dependency\n * between Userfront.refresh() [which requires setUser()]\n * and Userfront.user.update() [which requires refresh()].\n */\nimport { put } from \"./api.js\";\nimport { store } from \"./store.js\";\nimport { refresh } from \"./refresh.js\";\nimport { getTotp } from \"./totp.js\";\nimport { getJWTPayload } from \"./utils.js\";\nimport { updatePassword } from \"./password.js\";\n\n/**\n * Update the user record on Userfront\n * @param {Object} payload User properties to update e.g. { name: 'John Doe' }\n */\nexport async function update(payload) {\n  if (!payload || Object.keys(payload).length < 1) {\n    return console.warn(\"Missing user properties to update\");\n  }\n\n  // Make request to update the user\n  await put(`/self`, payload, {\n    headers: {\n      authorization: `Bearer ${store.tokens.accessToken}`,\n    },\n  });\n\n  // Refresh the access and ID tokens, and set the store.user object from the ID token\n  await refresh();\n\n  return store.user;\n}\n\n/**\n * Determine whether the access token has a given role\n * @param {String} roleName\n * @param {Object} options\n * @returns {Boolean}\n */\nexport function hasRole(roleName, { tenantId } = {}) {\n  try {\n    if (!store.tokens.accessToken || !store.tenantId) {\n      return false;\n    }\n    const { authorization } = getJWTPayload(store.tokens.accessToken);\n    if (!authorization) {\n      return false;\n    }\n    tenantId = tenantId || store.tenantId;\n    if (!authorization[tenantId] || !authorization[tenantId].roles) {\n      return false;\n    }\n    return authorization[tenantId].roles.indexOf(roleName) > -1;\n  } catch (error) {\n    return false;\n  }\n}\n\n/**\n * Add the methods to the store.user object\n */\nstore.user.update = update;\nstore.user.hasRole = hasRole;\nstore.user.updatePassword = updatePassword;\nstore.user.getTotp = getTotp;\n","import axios from \"axios\";\nimport { store } from \"./store.js\";\nimport {\n  tokens,\n  accessToken,\n  idToken,\n  setTokensFromCookies,\n  setTokenNames,\n} from \"./tokens\";\nimport { redirectIfLoggedIn } from \"./url.js\";\nimport { sendSms } from \"./mfa.js\";\nimport { signup } from \"./signup.js\";\nimport { login } from \"./login.js\";\nimport { updatePassword, resetPassword, sendResetLink } from \"./password.js\";\nimport { sendLoginLink } from \"./link.js\";\nimport { sendVerificationCode } from \"./verificationCode\";\nimport { logout } from \"./logout.js\";\nimport { mode, setMode, setModeSync } from \"./mode.js\";\n// import { setIframe } from \"./iframe.js\";\nimport { user } from \"./user.js\";\nimport \"./user.methods.js\";\nimport { refresh } from \"./refresh.js\";\nimport { apiUrl } from \"./constants.js\";\n\nlet initCallbacks = [];\n\n/**\n * Initialize the Userfront library.\n * @param {String} tenantId\n */\nfunction init(tenantId, opts = {}) {\n  if (!tenantId) return console.warn(\"Userfront initialized without tenantId\");\n\n  store.tenantId = tenantId;\n\n  store.baseUrl = opts.baseUrl || apiUrl;\n  if (!store.baseUrl.endsWith(\"/\")) {\n    store.baseUrl += \"/\";\n  }\n\n  if (opts.domain) {\n    store.domain = opts.domain;\n    const url = `https://${store.domain}`;\n    axios.defaults.headers.common[\"x-application-id\"] = url;\n    axios.defaults.headers.common[\"x-origin\"] = url;\n  }\n\n  setTokenNames();\n  // setIframe(); // TODO re-enable when iframe is needed\n  setTokensFromCookies();\n  setModeSync();\n\n  try {\n    if (initCallbacks.length > 0) {\n      initCallbacks.forEach((cb) => {\n        if (!cb || typeof cb !== \"function\") return;\n        cb({ tenantId });\n      });\n    }\n    initCallbacks = [];\n  } catch (error) {}\n}\n\n/**\n * Add a callback function to be called upon Userfront.init()\n * @param {Function} cb\n */\nfunction addInitCallback(cb) {\n  if (!cb || typeof cb !== \"function\") return;\n  initCallbacks.push(cb);\n}\n\n/**\n\n * Register a window-level event called \"urlchanged\" that will fire\n * whenever the browser URL changes.\n */\nlet isRegistered = false;\nfunction registerUrlChangedEventListener() {\n  if (isRegistered) return;\n  isRegistered = true;\n  try {\n    history.pushState = ((f) =>\n      function pushState() {\n        var ret = f.apply(this, arguments);\n        window.dispatchEvent(new Event(\"pushstate\"));\n        window.dispatchEvent(new Event(\"urlchanged\"));\n        return ret;\n      })(history.pushState);\n\n    history.replaceState = ((f) =>\n      function replaceState() {\n        var ret = f.apply(this, arguments);\n        window.dispatchEvent(new Event(\"replacestate\"));\n        window.dispatchEvent(new Event(\"urlchanged\"));\n        return ret;\n      })(history.replaceState);\n\n    window.addEventListener(\"popstate\", () => {\n      window.dispatchEvent(new Event(\"urlchanged\"));\n    });\n  } catch (error) {}\n}\n\n/**\n * EXPORTS\n */\n\nexport default {\n  // index\n  addInitCallback,\n  init,\n  registerUrlChangedEventListener,\n\n  //logout\n  logout,\n\n  // mode\n  mode,\n  setMode,\n\n  // refresh\n  refresh: (a, b, c) => {\n    try {\n      console.warn(\n        \"Userfront.refresh() is deprecated and will be removed. Please use Userfront.tokens.refresh() instead.\"\n      );\n    } catch (error) {}\n    return refresh(a, b, c);\n  },\n\n  // signon\n  login,\n  resetPassword,\n  updatePassword,\n  sendLoginLink,\n  sendResetLink,\n  sendVerificationCode,\n  signup,\n\n  // store\n  store,\n\n  // tokens\n  tokens,\n  accessToken,\n  idToken,\n\n  // url\n  redirectIfLoggedIn,\n\n  // user\n  user,\n\n  // mfa\n  sendSms,\n\n  // utils\n};\n","import { loginWithPassword } from \"./password.js\";\nimport { loginWithLink, sendPasswordlessLink } from \"./link.js\";\nimport { signonWithSso } from \"./sso.js\";\nimport { loginWithTotp } from \"./totp.js\";\nimport { loginWithVerificationCode } from \"./verificationCode.js\";\nimport { completeSamlLogin } from \"./saml.js\";\n\n/**\n * Log a user in via the provided method. This method serves to call other\n * methods, depending on the \"method\" parameter passed in.\n * @param {String} method\n * @param {Number} userId\n * @param {String} userUuid\n * @param {String} email\n * @param {String} username\n * @param {String} emailOrUsername\n * @param {String} phoneNumber\n * @param {String} password\n * @param {String} token\n * @param {String} uuid\n * @param {String} totpCode\n * @param {String} backupCode\n * @param {String} channel \"sms\" or \"email\"\n * @param {String} verificationCode\n * @param {String} redirect - do not redirect if false, or redirect to given path\n */\nexport async function login({\n  method,\n  // User identifiers\n  userId,\n  userUuid,\n  email,\n  username,\n  emailOrUsername,\n  phoneNumber,\n  // Password\n  password,\n  // Link\n  token,\n  uuid,\n  // Totp\n  totpCode,\n  backupCode,\n  // Verification code\n  channel,\n  verificationCode,\n  // Other\n  redirect,\n} = {}) {\n  if (!method) {\n    throw new Error('Userfront.login called without \"method\" property.');\n  }\n  switch (method) {\n    case \"apple\":\n    case \"azure\":\n    case \"facebook\":\n    case \"github\":\n    case \"google\":\n    case \"linkedin\":\n      return signonWithSso({ provider: method, redirect });\n    case \"password\":\n      return loginWithPassword({\n        email,\n        username,\n        emailOrUsername,\n        password,\n        redirect,\n      });\n    case \"passwordless\":\n      return sendPasswordlessLink({ email });\n    case \"link\":\n      return loginWithLink({ token, uuid, redirect });\n    case \"totp\":\n      return loginWithTotp({\n        totpCode,\n        backupCode,\n        userId,\n        userUuid,\n        emailOrUsername,\n        email,\n        username,\n        phoneNumber,\n        redirect,\n      });\n    case \"verificationCode\":\n      return loginWithVerificationCode({\n        channel,\n        email,\n        phoneNumber,\n        verificationCode,\n        redirect,\n      });\n    case \"saml\":\n      return completeSamlLogin();\n    default:\n      throw new Error('Userfront.login called with invalid \"method\" property.');\n  }\n}\n","import { get } from \"./api.js\";\nimport { store } from \"./store.js\";\nimport { throwFormattedError } from \"./utils.js\";\n\nexport async function completeSamlLogin() {\n  try {\n    if (!store.tokens.accessToken) {\n      return console.warn(\"Cannot complete SAML login without access token\");\n    }\n\n    const { data } = await get(`/auth/saml/idp/token`, {\n      headers: {\n        authorization: `Bearer ${store.tokens.accessToken}`,\n      },\n    });\n\n    window.location.assign(\n      `${store.baseUrl}auth/saml/idp/login?tenant_id=${store.tenantId}&token=${data.token}&uuid=${store.user.userUuid}`\n    );\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n","import { signupWithPassword } from \"./password.js\";\nimport { signonWithSso } from \"./sso.js\";\nimport { sendPasswordlessLink } from \"./link.js\";\nimport { sendVerificationCode } from \"./verificationCode.js\";\n\n/**\n * Register a user via the provided method. This method serves to call other\n * methods, depending on the \"method\" parameter passed in.\n * @param {String} method\n * @param {String} email\n * @param {String} username\n * @param {String} phoneNumber\n * @param {String} name\n * @param {Object} data - Object for custom user fields\n * @param {String} password\n * @param {String} channel \"sms\" or \"email\"\n * @param {String} redirect - do not redirect if false, or redirect to given path\n */\nexport async function signup({\n  method,\n  email,\n  username,\n  phoneNumber,\n  name,\n  data,\n  password,\n  channel,\n  redirect,\n} = {}) {\n  if (!method) {\n    throw new Error('Userfront.signup called without \"method\" property.');\n  }\n  switch (method) {\n    case \"apple\":\n    case \"azure\":\n    case \"facebook\":\n    case \"github\":\n    case \"google\":\n    case \"linkedin\":\n      return signonWithSso({ provider: method, redirect });\n    case \"password\":\n      return signupWithPassword({\n        username,\n        name,\n        email,\n        password,\n        userData: data,\n        redirect,\n      });\n    case \"passwordless\":\n      return sendPasswordlessLink({ email, name, username, userData: data });\n    case \"verificationCode\":\n      return sendVerificationCode({\n        channel,\n        email,\n        phoneNumber,\n        name,\n        username,\n        data,\n      });\n    default:\n      throw new Error(\n        'Userfront.signup called with invalid \"method\" property.'\n      );\n  }\n}\n","import { setCookiesAndTokens } from \"./cookies.js\";\nimport { store } from \"./store.js\";\nimport { handleRedirect } from \"./url.js\";\nimport { exchange } from \"./refresh.js\";\nimport { throwFormattedError } from \"./utils.js\";\nimport { post, put } from \"./api.js\";\n\n/**\n * Send an SMS to a phone number\n * @param {String} type Type of SMS to send\n * @param {String} phoneNumber Phone number in E.164 format\n * @param {String} firstFactorCode Identifier obtained from login() response\n * @returns {Object}\n */\nexport async function sendSms({ type, phoneNumber, firstFactorCode } = {}) {\n  if (!type) {\n    throw new Error('Userfront.sendSms called without \"type\" property.');\n  }\n\n  switch (type) {\n    case \"verificationCode\":\n      if (!phoneNumber || !firstFactorCode) {\n        throw new Error(\n          'Userfront.sendSms type \"verificationCode\" requires \"phoneNumber\" and \"firstFactorCode\".'\n        );\n      }\n\n      return sendMfaCode({\n        firstFactorCode,\n        phoneNumber,\n        strategy: \"verificationCode\",\n        channel: \"sms\",\n      });\n    default:\n      throw new Error('Userfront.sendSms called with invalid \"type\" property.');\n  }\n}\n\n/**\n * Send an MFA verification code\n * @param {String} firstFactorCode Identifier obtained from login() response\n * @param {String} strategy Type of MFA strategy\n * @param {String} channel Method of sending the verification code\n * @param {String} phoneNumber Phone number in E.164 format\n * @returns {Object}\n */\nexport async function sendMfaCode({\n  firstFactorCode,\n  strategy,\n  channel,\n  phoneNumber,\n} = {}) {\n  if (!firstFactorCode || !strategy || !channel || !phoneNumber) {\n    throw new Error(\"Userfront.sendMfaCode missing parameters.\");\n  }\n\n  try {\n    const { data } = await post(`/auth/mfa`, {\n      tenantId: store.tenantId,\n      firstFactorCode,\n      strategy,\n      channel,\n      phoneNumber,\n    });\n\n    return data;\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n\n/**\n * Log in using firstFactorCode and MFA verification code\n * @param {String} firstFactorCode Identifier obtained from login() response\n * @param {String} verificationCode Code provided by the user\n * @param {String|Boolean} redirect Redirect to given path unless specified as `false`\n * @returns {Object}\n */\nexport async function loginWithMfa({\n  firstFactorCode,\n  verificationCode,\n  redirect,\n} = {}) {\n  if (!firstFactorCode || !verificationCode) {\n    throw new Error(\"Userfront.loginWithMfa missing parameters.\");\n  }\n\n  try {\n    const { data } = await put(`/auth/mfa`, {\n      tenantId: store.tenantId,\n      firstFactorCode,\n      verificationCode,\n    });\n\n    setCookiesAndTokens(data.tokens);\n    await exchange(data);\n    handleRedirect({ redirect, data });\n    return data;\n  } catch (error) {\n    throwFormattedError(error);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}